C51 COMPILER V9.60.0.0   CALENDAR                                                          05/29/2020 16:57:57 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CALENDAR
OBJECT MODULE PLACED IN .\Objects\calendar.obj
COMPILER INVOKED BY: D:\Eng-Software\Keil_v5\core\C51\BIN\C51.EXE calendar.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE MODP2 D
                    -EBUG PRINT(.\Listings\calendar.lst) TABS(2) OBJECT(.\Objects\calendar.obj)

line level    source

   1          #include "calendar.h"
   2          #include "ds1302.h"
   3          #include <intrins.h>
   4          uchar century=20;//20xx
   5          //uchar Gredata[4];// 百年，年月日
   6          uchar sun_week;
   7          
   8          code uchar NLyear_dat[]="甲乙丙丁戊己庚辛壬癸子丑寅卯辰巳午未申酉戌亥";//0~9天干，10~21地支
   9          /*
  10          公历年对应的农历数据,每年三字节,
  11          格式第一字节BIT7-4 位表示闰月月份,值为0 为无闰月,BIT3-0 对应农历第1-4 月的大小
  12          第二字节BIT7-0 对应农历第5-12 月大小,第三字节BIT7 表示农历第13 个月大小
  13          月份对应的位为1 表示本农历月大(30 天),为0 表示小(29 天)
  14          第三字节BIT6-5 表示春节的公历月份,BIT4-0 表示春节的公历日期
  15          */
  16          uchar code year_code[] = {
  17          0x04,0xAe,0x53, //1901 0
  18          0x0A,0x57,0x48, //1902 3
  19          0x55,0x26,0xBd, //1903 6
  20          0x0d,0x26,0x50, //1904 9
  21          0x0d,0x95,0x44, //1905 12
  22          0x46,0xAA,0xB9, //1906 15
  23          0x05,0x6A,0x4d, //1907 18
  24          0x09,0xAd,0x42, //1908 21
  25          0x24,0xAe,0xB6, //1909
  26          0x04,0xAe,0x4A, //1910
  27          0x6A,0x4d,0xBe, //1911
  28          0x0A,0x4d,0x52, //1912
  29          0x0d,0x25,0x46, //1913
  30          0x5d,0x52,0xBA, //1914
  31          0x0B,0x54,0x4e, //1915
  32          0x0d,0x6A,0x43, //1916
  33          0x29,0x6d,0x37, //1917
  34          0x09,0x5B,0x4B, //1918
  35          0x74,0x9B,0xC1, //1919
  36          0x04,0x97,0x54, //1920
  37          0x0A,0x4B,0x48, //1921
  38          0x5B,0x25,0xBC, //1922
  39          0x06,0xA5,0x50, //1923
  40          0x06,0xd4,0x45, //1924
  41          0x4A,0xdA,0xB8, //1925
  42          0x02,0xB6,0x4d, //1926
  43          0x09,0x57,0x42, //1927
  44          0x24,0x97,0xB7, //1928
  45          0x04,0x97,0x4A, //1929
  46          0x66,0x4B,0x3e, //1930
  47          0x0d,0x4A,0x51, //1931
  48          0x0e,0xA5,0x46, //1932
  49          0x56,0xd4,0xBA, //1933
  50          0x05,0xAd,0x4e, //1934
  51          0x02,0xB6,0x44, //1935
  52          0x39,0x37,0x38, //1936
  53          0x09,0x2e,0x4B, //1937
  54          0x7C,0x96,0xBf, //1938
C51 COMPILER V9.60.0.0   CALENDAR                                                          05/29/2020 16:57:57 PAGE 2   

  55          0x0C,0x95,0x53, //1939
  56          0x0d,0x4A,0x48, //1940
  57          0x6d,0xA5,0x3B, //1941
  58          0x0B,0x55,0x4f, //1942
  59          0x05,0x6A,0x45, //1943
  60          0x4A,0xAd,0xB9, //1944
  61          0x02,0x5d,0x4d, //1945
  62          0x09,0x2d,0x42, //1946
  63          0x2C,0x95,0xB6, //1947
  64          0x0A,0x95,0x4A, //1948
  65          0x7B,0x4A,0xBd, //1949
  66          0x06,0xCA,0x51, //1950
  67          0x0B,0x55,0x46, //1951
  68          0x55,0x5A,0xBB, //1952
  69          0x04,0xdA,0x4e, //1953
  70          0x0A,0x5B,0x43, //1954
  71          0x35,0x2B,0xB8, //1955
  72          0x05,0x2B,0x4C, //1956
  73          0x8A,0x95,0x3f, //1957
  74          0x0e,0x95,0x52, //1958
  75          0x06,0xAA,0x48, //1959
  76          0x7A,0xd5,0x3C, //1960
  77          0x0A,0xB5,0x4f, //1961
  78          0x04,0xB6,0x45, //1962
  79          0x4A,0x57,0x39, //1963
  80          0x0A,0x57,0x4d, //1964
  81          0x05,0x26,0x42, //1965
  82          0x3e,0x93,0x35, //1966
  83          0x0d,0x95,0x49, //1967
  84          0x75,0xAA,0xBe, //1968
  85          0x05,0x6A,0x51, //1969
  86          0x09,0x6d,0x46, //1970
  87          0x54,0xAe,0xBB, //1971
  88          0x04,0xAd,0x4f, //1972
  89          0x0A,0x4d,0x43, //1973
  90          0x4d,0x26,0xB7, //1974
  91          0x0d,0x25,0x4B, //1975
  92          0x8d,0x52,0xBf, //1976
  93          0x0B,0x54,0x52, //1977
  94          0x0B,0x6A,0x47, //1978
  95          0x69,0x6d,0x3C, //1979
  96          0x09,0x5B,0x50, //1980
  97          0x04,0x9B,0x45, //1981
  98          0x4A,0x4B,0xB9, //1982
  99          0x0A,0x4B,0x4d, //1983
 100          0xAB,0x25,0xC2, //1984
 101          0x06,0xA5,0x54, //1985
 102          0x06,0xd4,0x49, //1986
 103          0x6A,0xdA,0x3d, //1987
 104          0x0A,0xB6,0x51, //1988
 105          0x09,0x37,0x46, //1989
 106          0x54,0x97,0xBB, //1990
 107          0x04,0x97,0x4f, //1991
 108          0x06,0x4B,0x44, //1992
 109          0x36,0xA5,0x37, //1993
 110          0x0e,0xA5,0x4A, //1994
 111          0x86,0xB2,0xBf, //1995
 112          0x05,0xAC,0x53, //1996
 113          0x0A,0xB6,0x47, //1997
 114          0x59,0x36,0xBC, //1998
 115          0x09,0x2e,0x50, //1999 294
 116          0x0C,0x96,0x45, //2000 297
C51 COMPILER V9.60.0.0   CALENDAR                                                          05/29/2020 16:57:57 PAGE 3   

 117          0x4d,0x4A,0xB8, //2001
 118          0x0d,0x4A,0x4C, //2002
 119          0x0d,0xA5,0x41, //2003
 120          0x25,0xAA,0xB6, //2004
 121          0x05,0x6A,0x49, //2005
 122          0x7A,0xAd,0xBd, //2006
 123          0x02,0x5d,0x52, //2007
 124          0x09,0x2d,0x47, //2008
 125          0x5C,0x95,0xBA, //2009
 126          0x0A,0x95,0x4e, //2010
 127          0x0B,0x4A,0x43, //2011
 128          0x4B,0x55,0x37, //2012
 129          0x0A,0xd5,0x4A, //2013
 130          0x95,0x5A,0xBf, //2014
 131          0x04,0xBA,0x53, //2015
 132          0x0A,0x5B,0x48, //2016
 133          0x65,0x2B,0xBC, //2017
 134          0x05,0x2B,0x50, //2018
 135          0x0A,0x93,0x45, //2019
 136          0x47,0x4A,0xB9, //2020
 137          0x06,0xAA,0x4C, //2021
 138          0x0A,0xd5,0x41, //2022
 139          0x24,0xdA,0xB6, //2023
 140          0x04,0xB6,0x4A, //2024
 141          0x69,0x57,0x3d, //2025
 142          0x0A,0x4e,0x51, //2026
 143          0x0d,0x26,0x46, //2027
 144          0x5e,0x93,0x3A, //2028
 145          0x0d,0x53,0x4d, //2029
 146          0x05,0xAA,0x43, //2030
 147          0x36,0xB5,0x37, //2031
 148          0x09,0x6d,0x4B, //2032
 149          0xB4,0xAe,0xBf, //2033
 150          0x04,0xAd,0x53, //2034
 151          0x0A,0x4d,0x48, //2035
 152          0x6d,0x25,0xBC, //2036
 153          0x0d,0x25,0x4f, //2037
 154          0x0d,0x52,0x44, //2038
 155          0x5d,0xAA,0x38, //2039
 156          0x0B,0x5A,0x4C, //2040
 157          0x05,0x6d,0x41, //2041
 158          0x24,0xAd,0xB6, //2042
 159          0x04,0x9B,0x4A, //2043
 160          0x7A,0x4B,0xBe, //2044
 161          0x0A,0x4B,0x51, //2045
 162          0x0A,0xA5,0x46, //2046
 163          0x5B,0x52,0xBA, //2047
 164          0x06,0xd2,0x4e, //2048
 165          0x0A,0xdA,0x42, //2049
 166          0x35,0x5B,0x37, //2050
 167          0x09,0x37,0x4B, //2051
 168          0x84,0x97,0xC1, //2052
 169          0x04,0x97,0x53, //2053
 170          0x06,0x4B,0x48, //2054
 171          0x66,0xA5,0x3C, //2055
 172          0x0e,0xA5,0x4f, //2056
 173          0x06,0xB2,0x44, //2057
 174          0x4A,0xB6,0x38, //2058
 175          0x0A,0xAe,0x4C, //2059
 176          0x09,0x2e,0x42, //2060
 177          0x3C,0x97,0x35, //2061
 178          0x0C,0x96,0x49, //2062
C51 COMPILER V9.60.0.0   CALENDAR                                                          05/29/2020 16:57:57 PAGE 4   

 179          0x7d,0x4A,0xBd, //2063
 180          0x0d,0x4A,0x51, //2064
 181          0x0d,0xA5,0x45, //2065
 182          0x55,0xAA,0xBA, //2066
 183          0x05,0x6A,0x4e, //2067
 184          0x0A,0x6d,0x43, //2068
 185          0x45,0x2e,0xB7, //2069
 186          0x05,0x2d,0x4B, //2070
 187          0x8A,0x95,0xBf, //2071
 188          0x0A,0x95,0x53, //2072
 189          0x0B,0x4A,0x47, //2073
 190          0x6B,0x55,0x3B, //2074
 191          0x0A,0xd5,0x4f, //2075
 192          0x05,0x5A,0x45, //2076
 193          0x4A,0x5d,0x38, //2077
 194          0x0A,0x5B,0x4C, //2078
 195          0x05,0x2B,0x42, //2079
 196          0x3A,0x93,0xB6, //2080
 197          0x06,0x93,0x49, //2081
 198          0x77,0x29,0xBd, //2082
 199          0x06,0xAA,0x51, //2083
 200          0x0A,0xd5,0x46, //2084
 201          0x54,0xdA,0xBA, //2085
 202          0x04,0xB6,0x4e, //2086
 203          0x0A,0x57,0x43, //2087
 204          0x45,0x27,0x38, //2088
 205          0x0d,0x26,0x4A, //2089
 206          0x8e,0x93,0x3e, //2090
 207          0x0d,0x52,0x52, //2091
 208          0x0d,0xAA,0x47, //2092
 209          0x66,0xB5,0x3B, //2093
 210          0x05,0x6d,0x4f, //2094
 211          0x04,0xAe,0x45, //2095
 212          0x4A,0x4e,0xB9, //2096
 213          0x0A,0x4d,0x4C, //2097
 214          0x0d,0x15,0x41, //2098
 215          0x2d,0x92,0xB5, //2099
 216          };
 217          ///月份数据表
 218          
 219          code uchar day_code1[9]={0x0,0x1f,0x3b,0x5a,0x78,0x97,0xb5,0xd4,0xf3};
 220          code uint day_code2[3]={0x111,0x130,0x14e};
 221          /*
 222          函数功能:输入BCD阳历数据,输出BCD阴历数据(只允许1901-2099年)
 223          调用函数示例:Conversion(c_sun,year_sun,month_sun,day_sun)
 224          如:计算2004年10月16日Conversion(0,0x4,0x10,0x16);
 225          c_sun,year_sun,month_sun,day_sun均为BCD数据,c_sun为世纪标志位,c_sun=0为21世
 226          纪,c_sun=1为19世纪
 227          调用函数后,原有数据不变,读moon_c,cale_moon_year,cale_moon_month,cale_moon_day得出阴历BCD数据
 228          */
 229          bit moon_c;
 230          data uchar  cale_moon_year,cale_moon_month,cale_moon_day;
 231          data uchar  moon_year,moon_month,moon_day,week;
 232          bit get_cale_moon_day(uchar month_p,uint table_addr);
 233          
 234          
 235          /*
 236          函数功能:输入BCD阳历数据,输出BCD阴历数据(只允许1901-2099年)
 237          调用函数示例:Conversion(c_sun,year_sun,month_sun,day_sun)
 238          如:计算2004年10月16日Conversion(0,0x4,0x10,0x16);
 239          c_sun,year_sun,month_sun,day_sun均为BCD数据,c_sun为世纪标志位,c_sun=0为21世
 240          纪,c_sun=1为19世纪
C51 COMPILER V9.60.0.0   CALENDAR                                                          05/29/2020 16:57:57 PAGE 5   

 241          调用函数后,原有数据不变,读moon_c,cale_moon_year,cale_moon_month,cale_moon_day得出阴历BCD数据
 242          */
 243          void Conversion(bit c,uchar year,uchar month,uchar day)
 244          { //c=0 为21世纪,c=1 为19世纪 输入输出数据均为BCD数据
 245   1        uchar temp1,temp2,temp3,month_p;
 246   1        uint temp4,table_addr;
 247   1        bit flag2,flag_y;
 248   1      //  year=0x20;month=3;day=9;
 249   1        year=(year>>4)*10+(year&0x0f);//BCD->hex 先把数据转换为十六进制
 250   1        month=(month>>4)*10+(month&0x0f);
 251   1        day=(day>>4)*10+(day&0x0f);
 252   1        //定位数据表地址
 253   1        if(c==0)
 254   1        {
 255   2          table_addr=(year+0x64-1)*0x3;
 256   2        }
 257   1        else
 258   1        {
 259   2          table_addr=(year-1)*0x3;
 260   2        }
 261   1        //定位数据表地址完成
 262   1        //取当年春节所在的公历月份
 263   1        temp1=year_code[table_addr+2]&0x60;
 264   1        temp1=_cror_(temp1,5);
 265   1        //取当年春节所在的公历月份完成
 266   1        //取当年春节所在的公历日
 267   1        temp2=year_code[table_addr+2]&0x1f;
 268   1        //取当年春节所在的公历日完成
 269   1        // 计算当年春年离当年元旦的天数,春节只会在公历1月或2月
 270   1        if(temp1==0x1)
 271   1        {
 272   2          temp3=temp2-1;
 273   2        }
 274   1        else
 275   1        {
 276   2          temp3=temp2+0x1f-1;
 277   2        }
 278   1        // 计算当年春年离当年元旦的天数完成
 279   1        //计算公历日离当年元旦的天数,为了减少运算,用了两个表
 280   1        //day_code1[9],day_code2[3]
 281   1        //如果公历月在九月或前,天数会少于0xff,用表day_code1[9],
 282   1        //在九月后,天数大于0xff,用表day_code2[3]
 283   1        //如输入公历日为8月10日,则公历日离元旦天数为day_code1[8-1]+10-1
 284   1        //如输入公历日为11月10日,则公历日离元旦天数为day_code2[11-10]+10-1
 285   1        if (month<10)
 286   1        {
 287   2          temp4=day_code1[month-1]+day-1;
 288   2        }
 289   1        else
 290   1        {
 291   2          temp4=day_code2[month-10]+day-1;
 292   2        }
 293   1        if ((month>0x2)&&(year%0x4==0))
 294   1        { //如果公历月大于2月并且该年的2月为闰月,天数加1
 295   2          temp4+=1;
 296   2        }
 297   1        //计算公历日离当年元旦的天数完成
 298   1        //判断公历日在春节前还是春节后
 299   1        if (temp4>=temp3)
 300   1        { //公历日在春节后或就是春节当日使用下面代码进行运算
 301   2          temp4-=temp3;
 302   2          month=0x1;
C51 COMPILER V9.60.0.0   CALENDAR                                                          05/29/2020 16:57:57 PAGE 6   

 303   2          month_p=0x1; //month_p为月份指向,公历日在春节前或就是春节当日month_p指向首月
 304   2          flag2=get_cale_moon_day(month_p,table_addr);
 305   2          //检查该农历月为大小还是小月,大月返回1,小月返回0
 306   2          flag_y=0;
 307   2          if(flag2==0)temp1=0x1d; //小月29天
 308   2          else temp1=0x1e; //大小30天
 309   2          temp2=year_code[table_addr]&0xf0;
 310   2          temp2=_cror_(temp2,4); //从数据表中取该年的闰月月份,如为0则该年无闰月
 311   2          while(temp4>=temp1)
 312   2          {
 313   3            temp4-=temp1;
 314   3            month_p+=1;
 315   3            if(month==temp2)
 316   3            {
 317   4            flag_y=~flag_y;
 318   4            if(flag_y==0)//?
 319   4            month+=1;
 320   4            }
 321   3            else month+=1;
 322   3            flag2=get_cale_moon_day(month_p,table_addr);
 323   3            if(flag2==0)temp1=0x1d;
 324   3            else temp1=0x1e;
 325   3          }
 326   2          day=temp4+1;
 327   2        }
 328   1        else
 329   1        { //公历日在春节前使用下面代码进行运算,从上一年计算
 330   2          temp3-=temp4;
 331   2          if (year==0x0)
 332   2          {
 333   3            year=0x63;c=1;
 334   3          }
 335   2          else year-=1;
 336   2          table_addr-=0x3;
 337   2          month=0xc;
 338   2          temp2=year_code[table_addr]&0xf0;
 339   2          temp2=_cror_(temp2,4);//闰月月份
 340   2          if (temp2==0)
 341   2          month_p=0xc;
 342   2          else
 343   2          month_p=0xd; //
 344   2          /*month_p为月份指向,如果当年有闰月,一年有十三个月,月指向13,无闰月指向12*/
 345   2          flag_y=0;
 346   2          flag2=get_cale_moon_day(month_p,table_addr);
 347   2          if(flag2==0)temp1=0x1d;
 348   2          else temp1=0x1e;
 349   2          while(temp3>temp1)
 350   2          {
 351   3            temp3-=temp1;
 352   3            month_p-=1;
 353   3            if(flag_y==0)month-=1;
 354   3            if(month==temp2)flag_y=~flag_y;
 355   3            flag2=get_cale_moon_day(month_p,table_addr);
 356   3            if(flag2==0)temp1=0x1d;
 357   3            else temp1=0x1e;
 358   3          }
 359   2          day=temp1-temp3+1;
 360   2        }
 361   1        moon_c=c; //HEX->BCD ,运算结束后,把数据转换为BCD数据
 362   1        temp1=year/10;
 363   1        temp1=_crol_(temp1,4);
 364   1        temp2=year%10;
C51 COMPILER V9.60.0.0   CALENDAR                                                          05/29/2020 16:57:57 PAGE 7   

 365   1        cale_moon_year=temp1|temp2;
 366   1        temp1=month/10;
 367   1        temp1=_crol_(temp1,4);
 368   1        temp2=month%10;
 369   1        cale_moon_month=temp1|temp2;
 370   1        temp1=day/10;
 371   1        temp1=_crol_(temp1,4);
 372   1        temp2=day%10;
 373   1        cale_moon_day=temp1|temp2;
 374   1      }
 375          
 376          /*子函数,用于读取数据表中农历月的大月或小月,如果该月为大返回1,为小返回0*/
 377          bit get_cale_moon_day(uchar month_p,uint table_addr)
 378          {
 379   1      uchar temp;
 380   1      switch (month_p)
 381   1      {
 382   2      case 1:{temp=year_code[table_addr]&0x08;
 383   3      if (temp==0)return(0);else return(1);}
 384   2      case 2:{temp=year_code[table_addr]&0x04;
 385   3      if (temp==0)return(0);else return(1);}
 386   2      case 3:{temp=year_code[table_addr]&0x02;
 387   3      if (temp==0)return(0);else return(1);}
 388   2      case 4:{temp=year_code[table_addr]&0x01;
 389   3      if (temp==0)return(0);else return(1);}
 390   2      case 5:{temp=year_code[table_addr+1]&0x80;
 391   3      if (temp==0) return(0);else return(1);}
 392   2      case 6:{temp=year_code[table_addr+1]&0x40;
 393   3      if (temp==0)return(0);else return(1);}
 394   2      case 7:{temp=year_code[table_addr+1]&0x20;
 395   3      if (temp==0)return(0);else return(1);}
 396   2      case 8:{temp=year_code[table_addr+1]&0x10;
 397   3      if (temp==0)return(0);else return(1);}
 398   2      case 9:{temp=year_code[table_addr+1]&0x08;
 399   3      if (temp==0)return(0);else return(1);}
 400   2      case 10:{temp=year_code[table_addr+1]&0x04;
 401   3      if (temp==0)return(0);else return(1);}
 402   2      case 11:{temp=year_code[table_addr+1]&0x02;
 403   3      if (temp==0)return(0);else return(1);}
 404   2      case 12:{temp=year_code[table_addr+1]&0x01;
 405   3      if (temp==0)return(0);else return(1);}
 406   2      case 13:{temp=year_code[table_addr+2]&0x80;
 407   3      if (temp==0)return(0);else return(1);}
 408   2      }
 409   1      return 255;
 410   1      }
 411          void cale_data_transfer()
 412          {
 413   1        //moon_year=cale_moon_year;
 414   1        moon_month=cale_moon_month;
 415   1        moon_day=cale_moon_day;
 416   1        moon_year=(cale_moon_year>>4)*10+(cale_moon_year&0x0f);//moon年为16进制数
 417   1      }
 418          /*函数功能:输入BCD阳历数据,输出BCD星期数据(只允许1901-2099年)
 419          调用函数示例:Conver_week(c_sun,year_sun,month_sun,day_sun)
 420          如:计算2004年10月16日Conversion(0,0x4,0x10,0x16);
 421          c_sun,year_sun,month_sun,day_sun均为BCD数据,c_sun为世纪标志位,c_sun=0为21世
 422          纪,c_sun=1为19世纪
 423          调用函数后,原有数据不变,读week得出阴历BCD数据
 424          */
 425          code uchar table_week[12]={0,3,3,6,1,4,6,2,5,0,3,5}; //月修正数据表
 426          /*
C51 COMPILER V9.60.0.0   CALENDAR                                                          05/29/2020 16:57:57 PAGE 8   

 427          算法:日期+年份+所过闰年数+月较正数之和除7 的余数就是星期但如果是在
 428          闰年又不到3 月份上述之和要减一天再除7
 429          星期数为0
 430          */
 431          void Conver_week(bit c,uchar year,uchar month,uchar day)
 432          {//c=0 为21世纪,c=1 为19世纪 输入输出数据均为BCD数据
 433   1        uchar temp1,temp2;
 434   1        temp1=year/16; //BCD->hex 先把数据转换为十六进制
 435   1        temp2=year%16;
 436   1        year=temp1*10+temp2;
 437   1        temp1=month/16;
 438   1        temp2=month%16;
 439   1        month=temp1*10+temp2;
 440   1        temp1=day/16;
 441   1        temp2=day%16;
 442   1        day=temp1*10+temp2;
 443   1        if (c==0){year+=0x64;} //如果为21世纪,年份数加100
 444   1        temp1=year/0x4; //所过闰年数只算1900年之后的
 445   1        temp2=year+temp1;
 446   1        temp2=temp2%0x7; //为节省资源,先进行一次取余,避免数大于0xff,避免使用整型数据
 447   1        temp2=temp2+day+table_week[month-1];
 448   1        if (year%0x4==0&&month<3)temp2-=1;
 449   1        week=temp2%0x7;
 450   1      }
 451          /**另一种方法**/
 452          uchar CalculateWeek(u8 century,u8 year, u8 month, u8 day)//通过年月日计算周
 453          {
 454   1        uchar week;
 455   1        year=(year>>4)*10+(year&0x0f);//BCD->hex 先把数据转换为十六进制
 456   1        month=(month>>4)*10+(month&0x0f);
 457   1        day=(day>>4)*10+(day&0x0f);
 458   1        
 459   1          if (month == 1 || month == 2)//判断month是否为1或2　
 460   1            year--, month += 12;
 461   1          week = year + year / 4 + century / 4 - 2 * century + 13 * (month + 1) / 5 + day - 1;
 462   1          sun_week=week%7;
 463   1          return week%7;
 464   1      }
 465          
 466          //算出给定月份的天数
 467          uchar Calculate_Totaldays_Ofmonth(uchar year,uchar month)
 468          {
 469   1        switch(month)
 470   1        {
 471   2          case 1:return 31;
 472   2          case 2:if(year%4)return 28;else return 29;
 473   2          case 3:return 31;
 474   2          case 4:return 30;
 475   2          case 5:return 31;
 476   2          case 6:return 30;
 477   2          case 7:return 31;
 478   2          case 8:return 31;
 479   2          case 9:return 30;
 480   2          case 10:return 31;
 481   2          case 11:return 30;
 482   2          case 12:return 31;
 483   2          default:return 0;
 484   2        }
 485   1        
 486   1      }
 487          
 488          //test
C51 COMPILER V9.60.0.0   CALENDAR                                                          05/29/2020 16:57:57 PAGE 9   

 489          //uchar c_sun,year_sun,month_sun,day_sun;
 490          //void main()
 491          //{
 492          //c_sun=1;
 493          //year_sun=0x2;
 494          //month_sun=0x11;
 495          //day_sun=0x3;
 496          //Conver_week(c_sun,year_sun,month_sun,day_sun);
 497          //Conversion(c_sun,year_sun,month_sun,day_sun);
 498          //while(1);
 499          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1506    ----
   CONSTANT SIZE    =    668    ----
   XDATA SIZE       =      2      18
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       4
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
