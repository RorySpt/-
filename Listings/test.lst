C51 COMPILER V9.60.0.0   TEST                                                              05/29/2020 16:57:55 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TEST
OBJECT MODULE PLACED IN .\Objects\test.obj
COMPILER INVOKED BY: D:\Eng-Software\Keil_v5\core\C51\BIN\C51.EXE test.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE MODP2 DEBUG
                    - PRINT(.\Listings\test.lst) TABS(2) OBJECT(.\Objects\test.obj)

line level    source

   1          #include "test.h"
   2          #include "habit.h"
   3          #include "lcd.h"
   4          #include "temps.h"
   5          #include "bmp.h"
   6          #include "ds1302.h"
   7          #include "button.h"
   8          #include "dht11.h"
   9          /****temp******/
  10          uchar c[]={"℃"};
  11          
  12          /****DS1302****/
  13          uchar init_ds_dat_time[7]={0x00,0x00,0x00,0x23,0x01,0x04,0x20};
  14          uchar code test_ds1302_ver_0[]={"lcd.test:version 1.0"};
  15          uchar time_clock=0;
  16          
  17          /****key*******/
  18          //uchar code test_key_ver_0[]={"key0~3.test:version 0"};
  19          uchar code test_key_ver_0[]={"key.test:  ver 0data:   2020/2/7"};
  20          uchar ver_key[4][8]={"key0","key1","key2","key3"};
  21          
  22          /****BZ********/
  23          sbit BZ=P1^5;
  24          uchar BZ_Forbiddenbit[4]=0;
  25          
  26          void test_BZ()
  27          {
  28   1        uint n=1;
  29   1        lcd_init();
  30   1        while(1)
  31   1        {
  32   2          recognition_key();lcd_wcmd(0x80);lcd_wdat((n/1000)+48);lcd_wdat((n/100)%10+48);lcd_wdat((n/10)%10+48);lc
             -d_wdat(n%10+48);
  33   2          if(Instruction_code_key[0]==0x80&&BZ_Forbiddenbit[0]==0){if(n<1000)n++;else n=0;BZ_Forbiddenbit[0]=1;}
  34   2          else {BZ_Forbiddenbit[0]=0;if(Instruction_code_key[0]==0x82&&Double_Press_counter[0]>10){if(n<1000)n++;e
             -lse n=0;Double_Press_counter[0]=0;}}
  35   2          if(Instruction_code_key[1]==0x80&&BZ_Forbiddenbit[1]==0){if(n>0)n--;else n=1000;BZ_Forbiddenbit[1]=1;}
  36   2          else {BZ_Forbiddenbit[1]=0;if(Instruction_code_key[1]==0x82&&Double_Press_counter[1]>10){if(n>0)n--;else
             - n=1000;Double_Press_counter[1]=0;}}
  37   2          BZ=1;d_n_ms(n);BZ=0;
  38   2        }
  39   1      }
  40          void test_buttons()
  41          {
  42   1        uint i,j;
  43   1        lcd_init();
  44   1        //while(1)test_display_temps();
  45   1        lcd_wcmd(0x80);
  46   1        for(i=0;i<16;i++)
  47   1        {
  48   2          lcd_wdat(test_key_ver_0[i]);
  49   2        }
  50   1        lcd_wcmd(0x90);
  51   1        for(;i<32;i++)
C51 COMPILER V9.60.0.0   TEST                                                              05/29/2020 16:57:55 PAGE 2   

  52   1        {
  53   2          lcd_wdat(test_key_ver_0[i]);
  54   2        }
  55   1        
  56   1        while(1)
  57   1        {
  58   2          
  59   2          //DS_IO=0;
  60   2          //test_display_temps();
  61   2          recognition_key();
  62   2          for(i=0;i<4;i++)
  63   2          {
  64   3            lcd_wcmd((0x88+i*4)*(i<2)+(0x98+(i-2)*4)*(i>=2));
  65   3            for(j=0;j<4;j++)
  66   3              lcd_wdat(ver_key[i][j]);
  67   3            lcd_wdat(' ');
  68   3            switch(Instruction_code_key[i])
  69   3            {
  70   4              case 0x80:lcd_wdat('0');break;
  71   4              case 0x81:lcd_wdat('1');break;
  72   4              case 0x82:if(Double_Press_counter[i]>10)lcd_wdat('2');else lcd_wdat('0');break;
  73   4              case 0x83:if(Double_Press_counter[i]>10)lcd_wdat('3');else lcd_wdat('1');break;
  74   4              default  :lcd_wdat('4');break;
  75   4            }
  76   3            lcd_wdat(' ');lcd_wdat(' ');
  77   3          }
  78   2          d_100ms();
  79   2        } 
  80   1      }
  81          
  82          void test_display_temps()
  83          {
  84   1        uint i=0;
  85   1        lcd_init();
  86   1        while(1)
  87   1        {
  88   2          Ds18b20_ChangTemp();
  89   2          d_100ms();
  90   2          Ds18b20_rTemp();
  91   2          
  92   2          temp_data_collation();
  93   2          //LCD_cmd_functionSet_Basic;//使用基本指令集
  94   2          lcd_wcmd(0x80);
  95   2          /*  if(temp_data_sign)lcd_wdat('-');
  96   2          lcd_wdat((uchar)(temp_data_Integer/100%10+48));
  97   2          lcd_wdat(temp_data_Integer/10%10+48);
  98   2          lcd_wdat(temp_data_Integer%10+48);
  99   2          lcd_wdat('.');
 100   2          lcd_wdat((temp_data_Decimal_r/100)+48);
 101   2          lcd_wdat((temp_data_Decimal_r/10%10)+48);
 102   2          lcd_wdat(c[0]);lcd_wdat(c[1]);
 103   2          lcd_wdat(' ');
 104   2          if(temp_data_sign)lcd_wdat('-');
 105   2          if(temp_data_Integer/100%10)lcd_wdat((uchar)(temp_data_Integer/100%10+48));*/
 106   2          lcd_wdat(temp_data_Integer/10%10+48);
 107   2          lcd_wdat(temp_data_Integer%10+48);
 108   2          lcd_wdat('.');
 109   2          lcd_wdat((temp_data_Decimal_r/10%10)+48);
 110   2          lcd_wdat((temp_data_Decimal_r%10)+48);
 111   2          if(!temp_data_sign)lcd_wdat(' ');
 112   2          if(!(temp_data_Integer/100%10))lcd_wdat(' '); 
 113   2          
C51 COMPILER V9.60.0.0   TEST                                                              05/29/2020 16:57:55 PAGE 3   

 114   2          lcd_wcmd(0x88);
 115   2          lcd_wdat(i/10000+48);
 116   2          lcd_wdat(i/1000%10+48); 
 117   2          lcd_wdat(i/100%10+48);  
 118   2          lcd_wdat(i/10%10+48); 
 119   2          lcd_wdat(i%10+48);  
 120   2          i++;
 121   2          lcd_wcmd(0x8f);
 122   2          lcd_wdat(error+48);
 123   2          //lcd_wcmd(0x98);
 124   2          /*for(j=0;j<8;j++)
 125   2          {
 126   2            lcd_wdat((uchar)(bit)((temp_High<<j)&0x80)+48);
 127   2          }
 128   2          for(j=0;j<8;j++)
 129   2          {
 130   2            lcd_wdat((uchar)(bit)((temp_Low<<j)&0x80)+48);
 131   2          }*/
 132   2      }
 133   1        
 134   1      }
 135          void test_lcd12864_displayPM1()
 136          {
 137   1          uint i,j;
 138   1        lcd_wcmd(0x30);
 139   1      for(i=0;i<1;i++)
 140   1          {
 141   2            lcd_wcmd(0x80);
 142   2            for(j=0;j<64;j++)
 143   2            {
 144   3              switch(j/16)
 145   3              {
 146   4                case 0:lcd_wdat(i+j);break; 
 147   4                case 1:lcd_wdat(i+j+16);break;
 148   4                case 2:lcd_wdat(i+j-16);break;
 149   4                case 3:lcd_wdat(i+j);break;
 150   4              }
 151   3            }
 152   2          }
 153   1      }
 154          void test_lcd12864_displayPM0()
 155          {
 156   1      
 157   1        lcd_init();
 158   1      
 159   1        while(1)
 160   1        {
 161   2          
 162   2          test_lcd12864_displayPM1();
 163   2          d_1s();
 164   2          lcd_Draw_PM(0,0,16,63,zhu);
 165   2          lcd_wcmd(0x36);
 166   2          d_1s();
 167   2          lcd_clr_DDram();lcd_wcmd(0x36);
 168   2          d_1s();
 169   2          lcd_clr_GD();
 170   2          d_1s();
 171   2        }
 172   1      }
 173          
 174          void test_ds1302()
 175          {
C51 COMPILER V9.60.0.0   TEST                                                              05/29/2020 16:57:55 PAGE 4   

 176   1        uchar i;
 177   1        lcd_init();
 178   1        
 179   1        lcd_wcmd(0x88);
 180   1        for(i=0;i<9;i++)lcd_wdat(test_ds1302_ver_0[i]);
 181   1        lcd_wcmd(0x98+2);
 182   1        for(;i<21;i++)lcd_wdat(test_ds1302_ver_0[i]);
 183   1        
 184   1        for(i=0;i<7;i++)ds_dat_time[i]=init_ds_dat_time[i];
 185   1        //Ds1302_Set_time();
 186   1      
 187   1        
 188   1      
 189   1        while(1)
 190   1        {
 191   2          Ds1302_Read_time();
 192   2          
 193   2          lcd_wcmd(0x80);
 194   2          lcd_wdat((ds_dat_time[2]>>4)+48);lcd_wdat((ds_dat_time[2]&0x0f)+48);//时
 195   2          lcd_wdat('/');
 196   2          lcd_wdat((ds_dat_time[1]>>4)+48);lcd_wdat((ds_dat_time[1]&0x0f)+48);//分
 197   2          lcd_wdat('/');
 198   2          lcd_wdat(((ds_dat_time[0])>>4)+48);lcd_wdat((ds_dat_time[0]&0x0f)+48);//秒
 199   2          lcd_wcmd(0x90);
 200   2          lcd_wdat((ds_dat_time[6]>>4)+48);lcd_wdat((ds_dat_time[6]&0x0f)+48);//年
 201   2          lcd_wdat('/');
 202   2          lcd_wdat((ds_dat_time[4]>>4)+48);lcd_wdat((ds_dat_time[4]&0x0f)+48);//月
 203   2          lcd_wdat('/');
 204   2          lcd_wdat((ds_dat_time[3]>>4)+48);lcd_wdat((ds_dat_time[3]&0x0f)+48);//日
 205   2          lcd_wcmd(0x96);lcd_wdat(0xD6);lcd_wdat(0xDC);
 206   2          lcd_wdat((ds_dat_time[5]>>16)+48);lcd_wdat((ds_dat_time[5]&0x0f)+48);//周
 207   2          //d_100ms();
 208   2      
 209   2        }
 210   1      /**/
 211   1      }
 212          
 213          void test_dht()//
 214          {
 215   1        uchar k=0;
 216   1        uchar i;
 217   1        lcd_init();
 218   1        lcd_clr_DDram ();
 219   1        lcd_clr_GD ();
 220   1        Ds18b20_Init();
 221   1        for(;;)
 222   1        {
 223   2          Ds18b20_ChangTemp();
 224   2          d_1s();
 225   2          Ds18b20_rTemp();
 226   2          
 227   2          temp_data_collation();
 228   2          d_n_ms(10);
 229   2          lcd_wcmd(0x30);
 230   2          lcd_wcmd(0x94);
 231   2          if(temp_data_sign)lcd_wdat('-');
 232   2          lcd_wdat((uchar)(temp_data_Integer/100%10+48));
 233   2          lcd_wdat(temp_data_Integer/10%10+48);
 234   2          lcd_wdat(temp_data_Integer%10+48);
 235   2          lcd_wdat('.');
 236   2          //lcd_wdat((temp_data_Decimal_r/10)+48);
 237   2          lcd_wdat((temp_data_Decimal_r%10)+48);
C51 COMPILER V9.60.0.0   TEST                                                              05/29/2020 16:57:55 PAGE 5   

 238   2          
 239   2          dht_rdat();
 240   2          d_n_ms(10);
 241   2          lcd_wcmd(0x80);
 242   2          lcd_wdat(Dht_RhData[0]/100+48);
 243   2          lcd_wdat(Dht_RhData[0]/10%10+48);
 244   2          lcd_wdat(Dht_RhData[0]%10+48);
 245   2          lcd_wdat('.');
 246   2          if(Dht_RhData[1]/100>0)lcd_wdat(Dht_RhData[1]/100+48);
 247   2          lcd_wdat(Dht_RhData[1]/10%10+48);
 248   2          lcd_wdat(Dht_RhData[1]%10+48);
 249   2          d_n_ms(10);
 250   2          lcd_wcmd(0x84);
 251   2          lcd_wdat(Dht_RhData[2]/100+48);
 252   2          lcd_wdat(Dht_RhData[2]/10%10+48);
 253   2          lcd_wdat(Dht_RhData[2]%10+48);
 254   2          lcd_wdat('.');
 255   2          if(Dht_RhData[3]/100>0)lcd_wdat(Dht_RhData[1]/100+48);
 256   2          lcd_wdat(Dht_RhData[3]/10%10+48);
 257   2          lcd_wdat(Dht_RhData[3]%10+48);
 258   2          /*m=(uint)Dht_RhData[1];
 259   2          m=m*39;
 260   2          lcd_wdat(m/10000+48);
 261   2          lcd_wdat(m/1000%10+48);*/
 262   2          d_n_ms(10);
 263   2          lcd_wcmd(0x90);
 264   2          lcd_wdat(Dht_error/100+48);
 265   2          lcd_wdat(Dht_error/10%10+48);
 266   2          lcd_wdat(Dht_error%10+48);
 267   2          d_n_ms(10);
 268   2          lcd_wcmd(0x88);
 269   2          for(i=0;i<7;i++)lcd_wdat(((Dht_RhData[4]>>(7-i))&0x01)+48);
 270   2          d_n_ms(10);
 271   2          lcd_wcmd(0x98);
 272   2          if((Dht_RhData[3]+Dht_RhData[2]+Dht_RhData[1]+Dht_RhData[0])==Dht_RhData[4])lcd_wdat('0');
 273   2          else lcd_wdat('1');
 274   2          d_1s();//d_1s();
 275   2        }
 276   1      }
 277          //rot_screenOutput()
 278          
 279          //void screenOutput()
 280          //{
 281          //uchar i,j;
 282          //  lcd_init();
 283          
 284          //    
 285          //    lcd_wcmd(0x80);
 286          //    lcd_wdat((ds_dat_time[2]>>4)+48);lcd_wdat((ds_dat_time[2]&0x0f)+48);//时
 287          //    lcd_wdat('/');
 288          //    lcd_wdat((ds_dat_time[1]>>4)+48);lcd_wdat((ds_dat_time[1]&0x0f)+48);//分
 289          //    lcd_wdat('/');
 290          //    lcd_wdat(((ds_dat_time[0])>>4)+48);lcd_wdat((ds_dat_time[0]&0x0f)+48);//秒
 291          //  
 292          //    lcd_wcmd(0x84);
 293          //    lcd_wdat(' ');
 294          //    if(temp_data_sign)lcd_wdat('-');
 295          //    if(temp_data_Integer/100%10)lcd_wdat(temp_data_Integer/100%10+48);
 296          //    lcd_wdat(temp_data_Integer/10%10+48);
 297          //    lcd_wdat(temp_data_Integer%10+48);
 298          //    lcd_wdat('.');
 299          //    lcd_wdat((temp_data_Decimal_r/10)+48);
C51 COMPILER V9.60.0.0   TEST                                                              05/29/2020 16:57:55 PAGE 6   

 300          //    lcd_wdat((temp_data_Decimal_r%10)+48);
 301          //    if(!temp_data_sign)lcd_wdat(' ');
 302          //    if(!(temp_data_Integer/100%10))lcd_wdat(' '); 
 303          //    
 304          //    dht_rdat();
 305          //    lcd_wcmd(0x90);
 306          //    if(Dht_RhData[0]/100)lcd_wdat(Dht_RhData[0]/100+48);
 307          //    lcd_wdat(Dht_RhData[0]/10%10+48);
 308          //    lcd_wdat(Dht_RhData[0]%10+48);
 309          //    if(!(Dht_RhData[0]/100))lcd_wdat(' ');  
 310          //    /*lcd_wdat('.');
 311          //    if(Dht_RhData[1]/100)lcd_wdat(Dht_RhData[1]/100+48);
 312          //    lcd_wdat(Dht_RhData[1]/10%10+48);
 313          //    lcd_wdat(Dht_RhData[1]%10+48);*/
 314          //    lcd_wcmd(0x92);
 315          //    if(Dht_RhData[2]/100)lcd_wdat(Dht_RhData[2]/100+48);
 316          //    lcd_wdat(Dht_RhData[2]/10%10+48);
 317          //    lcd_wdat(Dht_RhData[2]%10+48);
 318          //    if(!(Dht_RhData[2]/100))lcd_wdat(' ');
 319          //    /*lcd_wdat('.');
 320          //    if(Dht_RhData[3]/100>0)lcd_wdat(Dht_RhData[1]/100+48);
 321          //    lcd_wdat(Dht_RhData[3]/10%10+48);
 322          //    lcd_wdat(Dht_RhData[3]%10+48);  */
 323          //    
 324          //    lcd_wcmd(0x94);
 325          //    lcd_wdat(Double_Press_counter[0]/10/100+48);
 326          //    lcd_wdat(Double_Press_counter[0]/100%10+48);
 327          //    lcd_wdat(Double_Press_counter[0]/10%10+48);
 328          //    lcd_wdat(Double_Press_counter[0]%10+48);
 329          //  
 330          //  for(i=0;i<4;i++)
 331          //    {
 332          //      lcd_wcmd((0x88+i*4)*(i<2)+(0x98+(i-2)*4)*(i>=2));
 333          //      for(j=0;j<4;j++)
 334          //        lcd_wdat(ver_key[i][j]);
 335          //      lcd_wdat(' ');
 336          //      switch(Instruction_code_key[i])
 337          //      {
 338          //        case 0x80:lcd_wdat('0');break;
 339          //        case 0x81:lcd_wdat('1');break;
 340          //        case 0x82:if(Double_Press_counter[i]>2)lcd_wdat('2');else lcd_wdat('0');break;
 341          //        case 0x83:if(Double_Press_counter[i]>2)lcd_wdat('3');else lcd_wdat('1');break;
 342          //        default  :lcd_wdat('4');break;
 343          //      }
 344          //      lcd_wdat(' ');lcd_wdat(' ');
 345          //    }
 346          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2295    ----
   CONSTANT SIZE    =     54    ----
   XDATA SIZE       =     47      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.60.0.0   TEST                                                              05/29/2020 16:57:55 PAGE 7   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
