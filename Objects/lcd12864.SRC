; .\Objects\lcd12864.SRC generated from: lcd12864.c
; COMPILER INVOKED BY:
;        D:\Eng-Software\Keil_v5\core\C51\BIN\C51.EXE lcd12864.c COMPACT OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\lcd12864.lst) TABS(2) SRC(.\Objects\lcd12864.SRC)

$NOMOD51

NAME	LCD12864

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
XICON	DATA	0C0H
T0	BIT	0B0H.4
AC	BIT	0D0H.6
P4	DATA	0E8H
T1	BIT	0B0H.5
ISP_TRIG	DATA	0E6H
T2	BIT	090H.0
EA	BIT	0A8H.7
EC	BIT	0A8H.6
FE	BIT	098H.7
IE	DATA	0A8H
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
RI	BIT	098H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
TI	BIT	098H.1
INT1	BIT	0B0H.3
RCAP2H	DATA	0CBH
ISP_CMD	DATA	0E5H
PS	BIT	0B8H.4
SP	DATA	081H
T2EX	BIT	090H.1
OV	BIT	0D0H.2
RCAP2L	DATA	0CAH
C_T2	BIT	0C8H.1
WR	BIT	0B0H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
P00	BIT	080H.0
SBUF	DATA	099H
PCON	DATA	087H
P10	BIT	090H.0
P01	BIT	080H.1
P20	BIT	0A0H.0
P11	BIT	090H.1
P02	BIT	080H.2
ISP_ADDRH	DATA	0E3H
P30	BIT	0B0H.0
P21	BIT	0A0H.1
P12	BIT	090H.2
P03	BIT	080H.3
SCON	DATA	098H
P31	BIT	0B0H.1
P22	BIT	0A0H.2
P13	BIT	090H.3
P04	BIT	080H.4
P40	BIT	0E8H.0
TMOD	DATA	089H
TCON	DATA	088H
P32	BIT	0B0H.2
P23	BIT	0A0H.3
P14	BIT	090H.4
P05	BIT	080H.5
P41	BIT	0E8H.1
P33	BIT	0B0H.3
P24	BIT	0A0H.4
P15	BIT	090H.5
P06	BIT	080H.6
ISP_ADDRL	DATA	0E4H
P42	BIT	0E8H.2
P34	BIT	0B0H.4
P25	BIT	0A0H.5
P16	BIT	090H.6
P07	BIT	080H.7
P43	BIT	0E8H.3
P35	BIT	0B0H.5
P26	BIT	0A0H.6
P17	BIT	090H.7
P44	BIT	0E8H.4
P36	BIT	0B0H.6
P27	BIT	0A0H.7
P45	BIT	0E8H.5
P37	BIT	0B0H.7
P46	BIT	0E8H.6
IE0	BIT	088H.1
IE1	BIT	088H.3
AUXR	DATA	08EH
B	DATA	0F0H
CP_RL2	BIT	0C8H.0
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
TB8	BIT	098H.3
EX1	BIT	0A8H.2
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
TL2	DATA	0CCH
PT0	BIT	0B8H.1
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
ISP_CONTR	DATA	0E7H
PT2	BIT	0B8H.5
TR0	BIT	088H.4
RS1	BIT	0D0H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
WDT_CONTR	DATA	0E1H
LCD_RS	BIT	0A0H.7
PX1	BIT	0B8H.2
DPH	DATA	083H
LCD_RW	BIT	0A0H.6
DPL	DATA	082H
IPH	DATA	0B7H
EXEN2	BIT	0C8H.3
REN	BIT	098H.4
T2MOD	DATA	0C9H
T2CON	DATA	0C8H
ISP_DATA	DATA	0E2H
SADEN	DATA	0B9H
RXD	BIT	0B0H.0
SADDR	DATA	0A9H
TXD	BIT	0B0H.1
AUXR1	DATA	0A2H
F0	BIT	0D0H.5
LCD_E	BIT	0A0H.5
PSW	DATA	0D0H
?PR?lcd_busy?LCD12864                    SEGMENT CODE 
?BI?lcd_busy?LCD12864                    SEGMENT BIT OVERLAYABLE 
?PR?lcd_init?LCD12864                    SEGMENT CODE 
?PR?lcd_rdat?LCD12864                    SEGMENT CODE 
?PR?_lcd_wdat?LCD12864                   SEGMENT CODE 
?PR?_lcd_wcmd?LCD12864                   SEGMENT CODE 
?PR?_lcd_Draw_PM?LCD12864                SEGMENT CODE 
?PD?_lcd_Draw_PM?LCD12864                SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?_lcd_Draw_PM_dat?LCD12864            SEGMENT CODE 
?PD?_lcd_Draw_PM_dat?LCD12864            SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?_lcd_Draw_PM_dat2?LCD12864           SEGMENT CODE 
?PD?_lcd_Draw_PM_dat2?LCD12864           SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?_lcd_ch_display?LCD12864             SEGMENT CODE 
?PD?_lcd_ch_display?LCD12864             SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?lcd_clr_GD?LCD12864                  SEGMENT CODE 
?PR?lcd_clr_DDram?LCD12864               SEGMENT CODE 
?PR?_lcd_scrollBar?LCD12864              SEGMENT CODE 
?PD?_lcd_scrollBar?LCD12864              SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?_lcd_DrawPoint?LCD12864              SEGMENT CODE 
?PD?_lcd_DrawPoint?LCD12864              SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?_lcd_DrawLineX?LCD12864              SEGMENT CODE 
?PD?_lcd_DrawLineX?LCD12864              SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?_lcd_DrawLineY?LCD12864              SEGMENT CODE 
?PD?_lcd_DrawLineY?LCD12864              SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?_lcd_DrawLine?LCD12864               SEGMENT CODE 
?PD?_lcd_DrawLine?LCD12864               SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?LCD12864         SEGMENT CODE 
	EXTRN	CODE (_abs)
	EXTRN	CODE (d_100us)
	EXTRN	CODE (?C?CLDOPTR)
	EXTRN	CODE (?C?CLDPTR)
	PUBLIC	?_lcd_DrawLine?BYTE
	PUBLIC	_lcd_DrawLine
	PUBLIC	?_lcd_DrawLineY?BYTE
	PUBLIC	_lcd_DrawLineY
	PUBLIC	?_lcd_DrawLineX?BYTE
	PUBLIC	_lcd_DrawLineX
	PUBLIC	_lcd_DrawPoint
	PUBLIC	?_lcd_scrollBar?BYTE
	PUBLIC	_lcd_scrollBar
	PUBLIC	lcd_clr_DDram
	PUBLIC	lcd_clr_GD
	PUBLIC	_lcd_ch_display
	PUBLIC	?_lcd_Draw_PM_dat2?BYTE
	PUBLIC	_lcd_Draw_PM_dat2
	PUBLIC	?_lcd_Draw_PM_dat?BYTE
	PUBLIC	_lcd_Draw_PM_dat
	PUBLIC	?_lcd_Draw_PM?BYTE
	PUBLIC	_lcd_Draw_PM
	PUBLIC	_lcd_wcmd
	PUBLIC	_lcd_wdat
	PUBLIC	lcd_rdat
	PUBLIC	lcd_init
	PUBLIC	lcd_busy

	RSEG  ?PD?_lcd_DrawLineX?LCD12864
?_lcd_DrawLineX?BYTE:
        X0?1389:   DS   1
	ORG  1
        X1?1390:   DS   1
	ORG  2
         Y?1391:   DS   1
	ORG  3
     Color?1392:   DS   1

	RSEG  ?PD?_lcd_DrawLineY?LCD12864
?_lcd_DrawLineY?BYTE:
         X?1494:   DS   1
        Y0?1495:   DS   1
	ORG  2
        Y1?1496:   DS   1
	ORG  3
     Color?1497:   DS   1

	RSEG  ?PD?_lcd_Draw_PM?LCD12864
?_lcd_Draw_PM?BYTE:
          x?544:   DS   1
	ORG  1
          y?545:   DS   1
	ORG  2
       wide?546:   DS   1
	ORG  3
      hight?547:   DS   1
	ORG  4
        ptr?548:   DS   3
	ORG  7
       line?549:   DS   1
	ORG  8
        row?550:   DS   1

	RSEG  ?PD?_lcd_DrawLine?LCD12864
?_lcd_DrawLine?BYTE:
    StartX?1599:   DS   1
	ORG  1
   StartY?15100:   DS   1
	ORG  2
     EndX?15101:   DS   1
	ORG  3
     EndY?15102:   DS   1
	ORG  4
    Color?15103:   DS   1
	ORG  5
        t?15104:   DS   2
	ORG  7
 distance?15105:   DS   2
	ORG  9
        x?15106:   DS   2
	ORG  11
        y?15107:   DS   2
	ORG  13
  delta_x?15108:   DS   2
	ORG  15
  delta_y?15109:   DS   2
	ORG  17
     incx?15110:   DS   1
	ORG  18
     incy?15111:   DS   1

	RSEG  ?PD?_lcd_DrawPoint?LCD12864
?_lcd_DrawPoint?BYTE:
         X?1281:   DS   1
	ORG  1
     Color?1283:   DS   1

	RSEG  ?PD?_lcd_ch_display?LCD12864
?_lcd_ch_display?BYTE:
          z?868:   DS   3
	ORG  3
    Address?869:   DS   1

	RSEG  ?PD?_lcd_Draw_PM_dat?LCD12864
?_lcd_Draw_PM_dat?BYTE:
          x?651:   DS   1
          y?652:   DS   1
	ORG  2
       wide?653:   DS   1
	ORG  3
      hight?654:   DS   1
	ORG  4
        dat?655:   DS   1

	RSEG  ?PD?_lcd_scrollBar?LCD12864
?_lcd_scrollBar?BYTE:
         x?1173:   DS   1
         y?1174:   DS   1
     hight?1175:   DS   1
	ORG  3
       Max?1176:   DS   1
	ORG  4
       num?1177:   DS   1
	ORG  5
     bar_l?1179:   DS   1
	ORG  6
     bar_y?1180:   DS   1

	RSEG  ?BI?lcd_busy?LCD12864
?lcd_busy?BIT:
     result?040:   DBIT   1

	RSEG  ?PD?_lcd_Draw_PM_dat2?LCD12864
?_lcd_Draw_PM_dat2?BYTE:
          x?758:   DS   1
          y?759:   DS   1
	ORG  2
       wide?760:   DS   1
	ORG  3
      hight?761:   DS   1
	ORG  4
       dat0?762:   DS   1
	ORG  5
       dat1?763:   DS   1
; #include "lcd.h"
; #include <intrins.h>
; #include <stdlib.h>
; #define LCD_IO P1
; //#include "delay.h"
; 
; 

	RSEG  ?PR?LCD12864
Com0083:
L?0132:
	USING	0
	MOV  	R7,A
L?0133:
	MOVX 	A,@R0
	MOV  	R4,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R5,A
	SETB 	C
	SUBB 	A,R7
	MOV  	A,R6
	XRL  	A,#080H
	MOV  	R0,A
	MOV  	A,R4
	XRL  	A,#080H
	SUBB 	A,R0
	RET  	
L?0134:
	USING	0
L?0135:
	MOV  	A,#07H
L?0136:
	CLR  	C
L?0137:
	SUBB 	A,R3
	MOV  	R7,A
	MOV  	R0,A
	MOV  	A,#01H
	INC  	R0
	RET  	
L?0138:
	USING	0
	MOV  	A,R6
	MOV  	R3,A
	MOV  	A,R5
	ADD  	A,R3
	MOV  	R3,A
	CLR  	A
	RLC  	A
	MOV  	R2,A
	SETB 	C
	MOV  	A,R3
	SUBB 	A,#01FH
	MOV  	A,R2
	XRL  	A,#080H
	SUBB 	A,#080H
	MOV  	A,R5
	RET  	
L?0139:
	USING	0
L?0140:
	MOV  	R0,#LOW (StartX?1599)
	MOVX 	A,@R0
	MOV  	R7,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R5,A
	MOV  	R0,#LOW (Color?15103)
	MOVX 	A,@R0
	RET  	
L?0141:
	USING	0
	MOV  	A,R5
L?0142:
	CLR  	C
	SUBB 	A,#020H
	MOV  	A,#080H
	SUBB 	A,#080H
	RET  	
L?0143:
	USING	0
	MOVX 	A,@R0
	MOV  	R6,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R7,A
	SETB 	C
	SUBB 	A,#00H
	MOV  	A,R6
	XRL  	A,#080H
	SUBB 	A,#080H
	RET  	
L?0144:
	USING	0
L?0145:
	MOV  	R0,#LOW (distance?15105)
	MOVX 	A,@R0
	MOV  	R6,A
	INC  	R0
	MOVX 	A,@R0
	RET  	
; END OF Com0083

; bit lcd_busy()

	RSEG  ?PR?lcd_busy?LCD12864
lcd_busy:
			; SOURCE LINE # 8
; {
			; SOURCE LINE # 9
; 	bit result;
; 	//LCD_IO=0xff;
; 	LCD_RS=0;
			; SOURCE LINE # 12
	CLR  	LCD_RS
; 	LCD_RW=1;
			; SOURCE LINE # 13
	SETB 	LCD_RW
; 	LCD_E=1;
			; SOURCE LINE # 14
	SETB 	LCD_E
; 	result=(bit)(LCD_IO&0x80);
			; SOURCE LINE # 15
	MOV  	A,P1
	RLC  	A
	MOV  	result?040,C
; 	LCD_E=0;
			; SOURCE LINE # 16
	CLR  	LCD_E
; 	return(result);
			; SOURCE LINE # 17
	MOV  	C,result?040
; }
			; SOURCE LINE # 18
	RET  	
; END OF lcd_busy

; 
;  void lcd_init()

	RSEG  ?PR?lcd_init?LCD12864
lcd_init:
	USING	0
			; SOURCE LINE # 20
; {
			; SOURCE LINE # 21
; 	/*RST=0;delay_10um(4);
; 	RST=1; */
; 	//LCD_PSB=1; 
; 	lcd_wcmd(0x34);
			; SOURCE LINE # 25
	MOV  	R7,#034H
	LCALL	_lcd_wcmd
; 	lcd_wcmd(0x30);
			; SOURCE LINE # 26
	MOV  	R7,#030H
	LCALL	_lcd_wcmd
; 	lcd_wcmd(0x0c);
			; SOURCE LINE # 27
	MOV  	R7,#0CH
	LCALL	_lcd_wcmd
; 	//lcd_wcmd(0x01);  //«Â∆¡
; 	d_100us();
			; SOURCE LINE # 29
	LJMP 	d_100us
; END OF lcd_init

; }
; 
; uchar lcd_rdat()

	RSEG  ?PR?lcd_rdat?LCD12864
lcd_rdat:
	USING	0
			; SOURCE LINE # 32
; {
			; SOURCE LINE # 33
?C0003:
; 	uchar rdat;
; 	while(lcd_busy());
			; SOURCE LINE # 35
	LCALL	lcd_busy
	JC   	?C0003
; 	LCD_IO=0xff;
			; SOURCE LINE # 36
	MOV  	P1,#0FFH
; 	LCD_RW=1;
			; SOURCE LINE # 37
	SETB 	LCD_RW
; 	LCD_RS=1;
			; SOURCE LINE # 38
	SETB 	LCD_RS
; 	LCD_E=1;
			; SOURCE LINE # 39
	SETB 	LCD_E
; 	_nop_();_nop_();
			; SOURCE LINE # 40
	NOP  	
	NOP  	
; 	rdat=LCD_IO;
			; SOURCE LINE # 41
;---- Variable 'rdat?241' assigned to Register 'R7' ----
	MOV  	R7,P1
; 	LCD_E=0;
			; SOURCE LINE # 42
	CLR  	LCD_E
; 	return rdat;
			; SOURCE LINE # 43
; }
			; SOURCE LINE # 44
	RET  	
; END OF lcd_rdat

; 
; void  lcd_wdat(u8 data dat)

	RSEG  ?PR?_lcd_wdat?LCD12864
_lcd_wdat:
			; SOURCE LINE # 46
;---- Variable 'dat?342' assigned to Register 'R7' ----
; {	while(lcd_busy());
			; SOURCE LINE # 47
?C0006:
	LCALL	lcd_busy
	JC   	?C0006
; 	LCD_RW=0;
			; SOURCE LINE # 48
	CLR  	LCD_RW
; 	LCD_RS=1;
			; SOURCE LINE # 49
	SETB 	LCD_RS
; 	LCD_E=0;
			; SOURCE LINE # 50
	CLR  	LCD_E
; 	LCD_IO=dat;
			; SOURCE LINE # 51
	MOV  	P1,R7
; 	LCD_E=1;
			; SOURCE LINE # 52
	SETB 	LCD_E
; 	LCD_E=0;
			; SOURCE LINE # 53
	CLR  	LCD_E
; }
			; SOURCE LINE # 54
	RET  	
; END OF _lcd_wdat

; void lcd_wcmd(u8 data dat)

	RSEG  ?PR?_lcd_wcmd?LCD12864
_lcd_wcmd:
			; SOURCE LINE # 55
;---- Variable 'dat?443' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 56
?C0009:
; 	while(lcd_busy());
			; SOURCE LINE # 57
	LCALL	lcd_busy
	JC   	?C0009
;   LCD_RW=0;
			; SOURCE LINE # 58
	CLR  	LCD_RW
; 	LCD_RS=0;
			; SOURCE LINE # 59
	CLR  	LCD_RS
; 	LCD_E=0;
			; SOURCE LINE # 60
	CLR  	LCD_E
; 	LCD_IO=dat;
			; SOURCE LINE # 61
	MOV  	P1,R7
; 	LCD_E=1;
			; SOURCE LINE # 62
	SETB 	LCD_E
; 	LCD_E=0;
			; SOURCE LINE # 63
	CLR  	LCD_E
; }
			; SOURCE LINE # 64
	RET  	
; END OF _lcd_wcmd

; 
; 
; //void lcd_Draw_PM(const unsigned  char *ptr){}
; void lcd_Draw_PM(uchar x,uchar y,uchar wide,uchar hight,uchar *ptr)

	RSEG  ?PR?_lcd_Draw_PM?LCD12864
_lcd_Draw_PM:
	USING	0
			; SOURCE LINE # 68
	MOV  	R0,#LOW (x?544)
	MOV  	A,R7
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R5
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R3
	MOVX 	@R0,A
; {
			; SOURCE LINE # 69
; 	uchar line,row;
; 	lcd_wcmd(0x36);
			; SOURCE LINE # 71
	MOV  	R7,#036H
	LCALL	_lcd_wcmd
; 	//if(wide%8==0)wide=wide/8;else wide=wide/8+1;
; 	for(line=0;line<hight;line++)
			; SOURCE LINE # 73
	CLR  	A
	MOV  	R0,#LOW (line?549)
	MOVX 	@R0,A
?C0012:
	MOV  	R0,#LOW (hight?547)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (line?549)
	MOVX 	A,@R0
	MOV  	R6,A
	CLR  	C
	SUBB 	A,R7
	JC   	$ + 5H
	LJMP 	?C0020
; 	{
			; SOURCE LINE # 74
; 		if(y+line>31)
			; SOURCE LINE # 75
	MOV  	A,R6
	MOV  	R7,A
	MOV  	R0,#LOW (y?545)
	MOVX 	A,@R0
	MOV  	R5,A
	ADD  	A,R7
	MOV  	R7,A
	CLR  	A
	RLC  	A
	MOV  	R6,A
	SETB 	C
	MOV  	A,R7
	SUBB 	A,#01FH
	MOV  	A,R6
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0015
; 		{
			; SOURCE LINE # 76
; 			lcd_wcmd(0x80+y+line-32);
			; SOURCE LINE # 77
	MOV  	R0,#LOW (line?549)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	A,R5
	ADD  	A,R7
	ADD  	A,#060H
	MOV  	R7,A
	LCALL	_lcd_wcmd
; 			lcd_wcmd(0x80+x+8);			
			; SOURCE LINE # 78
	MOV  	R0,#LOW (x?544)
	MOVX 	A,@R0
	ADD  	A,#088H
; 		}
			; SOURCE LINE # 79
	SJMP 	?C0124
?C0015:
; 		else
; 		{
			; SOURCE LINE # 81
; 			lcd_wcmd(0x80+y+line);
			; SOURCE LINE # 82
	MOV  	R0,#LOW (y?545)
	MOVX 	A,@R0
	ADD  	A,#080H
	MOV  	R7,A
	MOV  	R0,#LOW (line?549)
	MOVX 	A,@R0
	ADD  	A,R7
	MOV  	R7,A
	LCALL	_lcd_wcmd
; 			lcd_wcmd(0x80+x);
			; SOURCE LINE # 83
	MOV  	R0,#LOW (x?544)
	MOVX 	A,@R0
	ADD  	A,#080H
?C0124:
	MOV  	R7,A
	LCALL	_lcd_wcmd
; 		}
			; SOURCE LINE # 84
?C0016:
; 		for(row=0;row<wide;row++)
			; SOURCE LINE # 85
	CLR  	A
	MOV  	R0,#LOW (row?550)
	MOVX 	@R0,A
?C0017:
	MOV  	R0,#LOW (wide?546)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (row?550)
	MOVX 	A,@R0
	MOV  	R5,A
	CLR  	C
	SUBB 	A,R7
	JNC  	?C0014
; 		{
			; SOURCE LINE # 86
; 			lcd_wdat(ptr[line*wide+row]);
			; SOURCE LINE # 87
	DEC  	R0
	MOVX 	A,@R0
	MOV  	B,R7
	MUL  	AB
	MOV  	R7,A
	MOV  	A,R5
	ADD  	A,R7
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,B
	MOV  	DPH,A
	MOV  	R0,#LOW (ptr?548)
	MOVX 	A,@R0
	MOV  	R3,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R2,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R1,A
	LCALL	?C?CLDOPTR
	MOV  	R7,A
	LCALL	_lcd_wdat
; 		}
			; SOURCE LINE # 88
	MOV  	R0,#LOW (row?550)
	MOVX 	A,@R0
	INC  	A
	MOVX 	@R0,A
	SJMP 	?C0017
; 	}
			; SOURCE LINE # 89
?C0014:
	MOV  	R0,#LOW (line?549)
	MOVX 	A,@R0
	INC  	A
	MOVX 	@R0,A
	LJMP 	?C0012
; 	
; }
			; SOURCE LINE # 91
?C0020:
	RET  	
; END OF _lcd_Draw_PM

; void lcd_Draw_PM_dat(uchar x,uchar y,uchar wide,uchar hight,uchar dat)//x:8,y:64,wide:16,hight:64

	RSEG  ?PR?_lcd_Draw_PM_dat?LCD12864
_lcd_Draw_PM_dat:
	USING	0
			; SOURCE LINE # 92
	MOV  	R0,#LOW (wide?653)
	MOV  	A,R3
	MOVX 	@R0,A
;---- Variable 'y?652' assigned to Register 'R5' ----
;---- Variable 'x?651' assigned to Register 'R1' ----
	MOV  	R1,AR7
; {
			; SOURCE LINE # 93
; 	uchar line,row;
; 	lcd_wcmd(0x36);
			; SOURCE LINE # 95
	MOV  	R7,#036H
	LCALL	_lcd_wcmd
; 	//if(wide%8==0)wide=wide/8;else wide=wide/8+1;
; 	for(line=0;line<hight;line++)
			; SOURCE LINE # 97
;---- Variable 'line?656' assigned to Register 'R6' ----
	CLR  	A
	MOV  	R6,A
?C0021:
	MOV  	R0,#LOW (hight?654)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	A,R6
	CLR  	C
	SUBB 	A,R7
	JNC  	?C0029
; 	{
			; SOURCE LINE # 98
; 		if(y+line>31)
			; SOURCE LINE # 99
	LCALL	L?0138
	JC   	?C0024
; 		{
			; SOURCE LINE # 100
; 			lcd_wcmd(0x80+y+line-32);
			; SOURCE LINE # 101
	ADD  	A,R6
	ADD  	A,#060H
	MOV  	R7,A
	LCALL	_lcd_wcmd
; 			lcd_wcmd(0x80+x+8);			
			; SOURCE LINE # 102
	MOV  	A,R1
	ADD  	A,#088H
; 		}
			; SOURCE LINE # 103
	SJMP 	?C0125
?C0024:
; 		else
; 		{
			; SOURCE LINE # 105
; 			lcd_wcmd(0x80+y+line);
			; SOURCE LINE # 106
	ADD  	A,#080H
	ADD  	A,R6
	MOV  	R7,A
	LCALL	_lcd_wcmd
; 			lcd_wcmd(0x80+x);
			; SOURCE LINE # 107
	MOV  	A,R1
	ADD  	A,#080H
?C0125:
	MOV  	R7,A
	LCALL	_lcd_wcmd
; 		}
			; SOURCE LINE # 108
?C0025:
; 		for(row=0;row<wide;row++)
			; SOURCE LINE # 109
;---- Variable 'row?657' assigned to Register 'R4' ----
	CLR  	A
	MOV  	R4,A
?C0026:
	MOV  	R0,#LOW (wide?653)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	A,R4
	CLR  	C
	SUBB 	A,R7
	JNC  	?C0023
; 		{
			; SOURCE LINE # 110
; 			lcd_wdat(dat);
			; SOURCE LINE # 111
	MOV  	R0,#LOW (dat?655)
	MOVX 	A,@R0
	MOV  	R7,A
	LCALL	_lcd_wdat
; 		}
			; SOURCE LINE # 112
	INC  	R4
	SJMP 	?C0026
; 	}
			; SOURCE LINE # 113
?C0023:
	INC  	R6
	SJMP 	?C0021
; }
			; SOURCE LINE # 114
?C0029:
	RET  	
; END OF _lcd_Draw_PM_dat

; void lcd_Draw_PM_dat2(uchar x,uchar y,uchar wide,uchar hight,uchar dat0,uchar dat1)//∏¯÷∏∂®«¯”ÚÃÓ»Î÷∏∂®ƒ⁄»›

	RSEG  ?PR?_lcd_Draw_PM_dat2?LCD12864
_lcd_Draw_PM_dat2:
	USING	0
			; SOURCE LINE # 115
	MOV  	R0,#LOW (wide?760)
	MOV  	A,R3
	MOVX 	@R0,A
;---- Variable 'y?759' assigned to Register 'R5' ----
;---- Variable 'x?758' assigned to Register 'R1' ----
	MOV  	R1,AR7
; {
			; SOURCE LINE # 116
; 	uchar line,row;
; 	lcd_wcmd(0x36);
			; SOURCE LINE # 118
	MOV  	R7,#036H
	LCALL	_lcd_wcmd
; 	//if(wide%8==0)wide=wide/8;else wide=wide/8+1;
; 	for(line=0;line<hight;line++)
			; SOURCE LINE # 120
;---- Variable 'line?764' assigned to Register 'R6' ----
	CLR  	A
	MOV  	R6,A
?C0030:
	MOV  	R0,#LOW (hight?761)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	A,R6
	CLR  	C
	SUBB 	A,R7
	JNC  	?C0038
; 	{
			; SOURCE LINE # 121
; 		if(y+line>31)
			; SOURCE LINE # 122
	LCALL	L?0138
	JC   	?C0033
; 		{
			; SOURCE LINE # 123
; 			lcd_wcmd(0x80+y+line-32);
			; SOURCE LINE # 124
	ADD  	A,R6
	ADD  	A,#060H
	MOV  	R7,A
	LCALL	_lcd_wcmd
; 			lcd_wcmd(0x80+x+8);			
			; SOURCE LINE # 125
	MOV  	A,R1
	ADD  	A,#088H
; 		}
			; SOURCE LINE # 126
	SJMP 	?C0126
?C0033:
; 		else
; 		{
			; SOURCE LINE # 128
; 			lcd_wcmd(0x80+y+line);
			; SOURCE LINE # 129
	ADD  	A,#080H
	ADD  	A,R6
	MOV  	R7,A
	LCALL	_lcd_wcmd
; 			lcd_wcmd(0x80+x);
			; SOURCE LINE # 130
	MOV  	A,R1
	ADD  	A,#080H
?C0126:
	MOV  	R7,A
	LCALL	_lcd_wcmd
; 		}
			; SOURCE LINE # 131
?C0034:
; 		for(row=0;row<wide;row++)
			; SOURCE LINE # 132
;---- Variable 'row?765' assigned to Register 'R4' ----
	CLR  	A
	MOV  	R4,A
?C0035:
	MOV  	R0,#LOW (wide?760)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	A,R4
	CLR  	C
	SUBB 	A,R7
	JNC  	?C0032
; 		{
			; SOURCE LINE # 133
; 			lcd_wdat(dat0);lcd_wdat(dat1);
			; SOURCE LINE # 134
	MOV  	R0,#LOW (dat0?762)
	MOVX 	A,@R0
	MOV  	R7,A
	LCALL	_lcd_wdat
	INC  	R0
	MOVX 	A,@R0
	MOV  	R7,A
	LCALL	_lcd_wdat
; 		}
			; SOURCE LINE # 135
	INC  	R4
	SJMP 	?C0035
; 	}
			; SOURCE LINE # 136
?C0032:
	INC  	R6
	SJMP 	?C0030
; }
			; SOURCE LINE # 137
?C0038:
	RET  	
; END OF _lcd_Draw_PM_dat2

; void lcd_ch_display(uchar y,uchar x,uchar *z)

	RSEG  ?PR?_lcd_ch_display?LCD12864
_lcd_ch_display:
	USING	0
			; SOURCE LINE # 138
	MOV  	R0,#LOW (z?868)
	MOV  	A,R3
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R2
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R1
	MOVX 	@R0,A
;---- Variable 'x?867' assigned to Register 'R5' ----
;---- Variable 'y?866' assigned to Register 'R6' ----
	MOV  	R6,AR7
; { 
			; SOURCE LINE # 139
;  	uchar Address;
; 	lcd_wcmd(0x30);
			; SOURCE LINE # 141
	MOV  	R7,#030H
	LCALL	_lcd_wcmd
;  	if(y==0){Address=0x80+x;} 	          //Y≈–∂œµ⁄º∏––,X≈–∂œµ⁄º∏¡–,0x80Œ™“∫æß––≥ı ºµÿ÷∑
			; SOURCE LINE # 142
	MOV  	A,R6
	MOV  	R3,A
	MOV  	R2,#00H
	JNZ  	?C0039
	MOV  	A,R5
	ADD  	A,#080H
	INC  	R0
	MOVX 	@R0,A
?C0039:
;  	if(y==1){Address=0x90+x;} 	   
			; SOURCE LINE # 143
	MOV  	A,R3
	XRL  	A,#01H
	ORL  	A,R2
	JNZ  	?C0040
	MOV  	A,R5
	ADD  	A,#090H
	MOV  	R0,#LOW (Address?869)
	MOVX 	@R0,A
?C0040:
;  	if(y==2){Address=0x88+x;} 
			; SOURCE LINE # 144
	MOV  	A,R6
	XRL  	A,#02H
	JNZ  	?C0041
	MOV  	A,R5
	ADD  	A,#088H
	MOV  	R0,#LOW (Address?869)
	MOVX 	@R0,A
?C0041:
;  	if(y==3){Address=0x98+x;} 
			; SOURCE LINE # 145
	MOV  	R7,AR6
	MOV  	A,R7
	XRL  	A,#03H
	JNZ  	?C0042
	MOV  	A,R5
	ADD  	A,#098H
	MOV  	R0,#LOW (Address?869)
	MOVX 	@R0,A
?C0042:
; 	lcd_wcmd(Address);	          //–¥»Îµÿ÷∑√¸¡ÓµΩLCD12864	
			; SOURCE LINE # 146
	MOV  	R0,#LOW (Address?869)
	MOVX 	A,@R0
	MOV  	R7,A
	LCALL	_lcd_wcmd
?C0043:
; 	while(*z!='\0')					      //–¥»Îœ‘ æ ˝æ›µƒ¥Û–°
			; SOURCE LINE # 147
	MOV  	R0,#LOW (z?868)
	MOVX 	A,@R0
	MOV  	R3,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R2,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R1,A
	LCALL	?C?CLDPTR
	JZ   	?C0045
; 	{		
			; SOURCE LINE # 148
;  		lcd_wdat(*z++); 	          //–¥»Îœ‘ æ ˝æ›µΩLCD12864					  
			; SOURCE LINE # 149
	MOV  	R0,#LOW (z?868)
	MOVX 	A,@R0
	MOV  	R3,A
	INC  	R0
	INC  	R0
	MOVX 	A,@R0
	MOV  	R1,A
	ADD  	A,#01H
	MOVX 	@R0,A
	DEC  	R0
	MOVX 	A,@R0
	MOV  	R2,A
	ADDC 	A,#00H
	MOVX 	@R0,A
	LCALL	?C?CLDPTR
	MOV  	R7,A
	LCALL	_lcd_wdat
; 	}  
			; SOURCE LINE # 150
	SJMP 	?C0043
; }
			; SOURCE LINE # 151
?C0045:
	RET  	
; END OF _lcd_ch_display

; //void lcd_clr_GD(void)
; //{
; //	uchar i, j, k;
; //	lcd_wcmd(0x34);        //¥Úø™¿©’π÷∏¡ÓºØ  
; //	for(j=0,i=0x80; j<32; j++)
; //	{
; //		lcd_wcmd(i++);
; //		lcd_wcmd(0x80);
; //		for(k=0; k<16; k++)lcd_wdat(0x00);
; //	}
; //	for(j=0,i=0x80; j<32; j++)
; //	{
; //		lcd_wcmd(i++);
; //		lcd_wcmd(0x88);	   
; //		for(k=0; k<16; k++)lcd_wdat(0x00);
; //	}  
; //}
; void lcd_clr_GD(void)

	RSEG  ?PR?lcd_clr_GD?LCD12864
lcd_clr_GD:
	USING	0
			; SOURCE LINE # 169
; {
			; SOURCE LINE # 170
; 	uchar i,j;
; 	lcd_wcmd(0x34);
			; SOURCE LINE # 172
	MOV  	R7,#034H
	LCALL	_lcd_wcmd
; 	for(j=0;j<64;j++)
			; SOURCE LINE # 173
;---- Variable 'j?971' assigned to Register 'R6' ----
	CLR  	A
	MOV  	R6,A
?C0046:
	MOV  	A,R6
	CLR  	C
	SUBB 	A,#040H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0052
; 	{
			; SOURCE LINE # 174
; 		lcd_wcmd(0x80+j);
			; SOURCE LINE # 175
	MOV  	A,R6
	ADD  	A,#080H
	MOV  	R7,A
	LCALL	_lcd_wcmd
; 		for(i=0;i<32;i++)lcd_wdat(0x00);
			; SOURCE LINE # 176
;---- Variable 'i?970' assigned to Register 'R5' ----
	CLR  	A
	MOV  	R5,A
?C0049:
	LCALL	L?0141
	JNC  	?C0048
	CLR  	A
	MOV  	R7,A
	LCALL	_lcd_wdat
	INC  	R5
	SJMP 	?C0049
; 	}
			; SOURCE LINE # 177
?C0048:
	INC  	R6
	SJMP 	?C0046
; }
			; SOURCE LINE # 178
?C0052:
	RET  	
; END OF lcd_clr_GD

; 
; void lcd_clr_DDram()

	RSEG  ?PR?lcd_clr_DDram?LCD12864
lcd_clr_DDram:
	USING	0
			; SOURCE LINE # 180
; {
			; SOURCE LINE # 181
; 	uchar i;
; 	lcd_wcmd(0x30);
			; SOURCE LINE # 183
	MOV  	R7,#030H
	LCALL	_lcd_wcmd
; 	lcd_wcmd(0x80);
			; SOURCE LINE # 184
	MOV  	R7,#080H
	LCALL	_lcd_wcmd
; 	for(i=0;i<32;i++)lcd_wdat(' ');
			; SOURCE LINE # 185
;---- Variable 'i?1072' assigned to Register 'R6' ----
	CLR  	A
	MOV  	R6,A
?C0053:
	MOV  	A,R6
	LCALL	L?0142
	JNC  	?C0054
	MOV  	R7,#020H
	LCALL	_lcd_wdat
	INC  	R6
	SJMP 	?C0053
?C0054:
; 	lcd_wcmd(0x90);
			; SOURCE LINE # 186
	MOV  	R7,#090H
	LCALL	_lcd_wcmd
; 	for(i=0;i<32;i++)lcd_wdat(' ');
			; SOURCE LINE # 187
	CLR  	A
	MOV  	R6,A
?C0056:
	MOV  	A,R6
	LCALL	L?0142
	JNC  	?C0059
	MOV  	R7,#020H
	LCALL	_lcd_wdat
	INC  	R6
	SJMP 	?C0056
; }
			; SOURCE LINE # 188
?C0059:
	RET  	
; END OF lcd_clr_DDram

; 
; void lcd_scrollBar(uchar x,uchar y,uchar hight,uchar Max,uchar num)

	RSEG  ?PR?_lcd_scrollBar?LCD12864
_lcd_scrollBar:
	USING	0
			; SOURCE LINE # 190
	MOV  	R0,#LOW (x?1173)
	MOV  	A,R7
	MOVX 	@R0,A
;---- Variable 'hight?1175' assigned to Register 'R3' ----
;---- Variable 'y?1174' assigned to Register 'R1' ----
	MOV  	R1,AR5
; {
			; SOURCE LINE # 191
; 	uchar line,bar_l,bar_y;
; 	lcd_wcmd(0x36);
			; SOURCE LINE # 193
	MOV  	R7,#036H
	LCALL	_lcd_wcmd
; 	bar_l=(hight)/Max;
			; SOURCE LINE # 194
	MOV  	R0,#LOW (Max?1176)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	A,R3
	MOV  	B,R7
	DIV  	AB
	MOV  	R6,A
	MOV  	R0,#LOW (bar_l?1179)
	MOVX 	@R0,A
; 	bar_y=1+bar_l*num;
			; SOURCE LINE # 195
	DEC  	R0
	MOVX 	A,@R0
	MOV  	R5,A
	MOV  	A,R6
	MOV  	B,R5
	MUL  	AB
	INC  	A
	MOV  	R0,#LOW (bar_y?1180)
	MOVX 	@R0,A
; 	hight=hight-hight%Max+1;
			; SOURCE LINE # 196
	MOV  	A,R3
	MOV  	B,R7
	DIV  	AB
	CLR  	C
	MOV  	A,R3
	SUBB 	A,B
	INC  	A
	MOV  	R3,A
; 	for(line=0;line<=hight;line++)
			; SOURCE LINE # 197
;---- Variable 'line?1178' assigned to Register 'R6' ----
	CLR  	A
	MOV  	R6,A
?C0060:
	MOV  	A,R6
	SETB 	C
	SUBB 	A,R3
	JNC  	?C0070
; 	{
			; SOURCE LINE # 198
; 		if(y+line>31)
			; SOURCE LINE # 199
	MOV  	A,R6
	MOV  	R5,A
	MOV  	A,R1
	ADD  	A,R5
	MOV  	R5,A
	CLR  	A
	RLC  	A
	MOV  	R4,A
	SETB 	C
	MOV  	A,R5
	SUBB 	A,#01FH
	MOV  	A,R4
	XRL  	A,#080H
	SUBB 	A,#080H
	MOV  	A,R1
	JC   	?C0063
; 		{
			; SOURCE LINE # 200
; 			lcd_wcmd(0x80+y+line-32);
			; SOURCE LINE # 201
	ADD  	A,R6
	ADD  	A,#060H
	MOV  	R7,A
	LCALL	_lcd_wcmd
; 			lcd_wcmd(0x80+x+8);			
			; SOURCE LINE # 202
	MOV  	R0,#LOW (x?1173)
	MOVX 	A,@R0
	ADD  	A,#088H
; 		}
			; SOURCE LINE # 203
	SJMP 	?C0127
?C0063:
; 		else
; 		{
			; SOURCE LINE # 205
; 			lcd_wcmd(0x80+y+line);
			; SOURCE LINE # 206
	ADD  	A,#080H
	ADD  	A,R6
	MOV  	R7,A
	LCALL	_lcd_wcmd
; 			lcd_wcmd(0x80+x);
			; SOURCE LINE # 207
	MOV  	R0,#LOW (x?1173)
	MOVX 	A,@R0
	ADD  	A,#080H
?C0127:
	MOV  	R7,A
	LCALL	_lcd_wcmd
; 		}
			; SOURCE LINE # 208
?C0064:
; 			if(line==0){lcd_wdat(0x00);lcd_wdat(0x1f);}
			; SOURCE LINE # 209
	MOV  	A,R6
	JNZ  	?C0065
	SJMP 	?C0128
?C0065:
; 			
; 			else if((line<bar_y+bar_l)&&(line>=bar_y)){lcd_wdat(0x00);lcd_wdat(0x11);}
			; SOURCE LINE # 211
	MOV  	R0,#LOW (bar_l?1179)
	MOVX 	A,@R0
	MOV  	R5,A
	INC  	R0
	MOVX 	A,@R0
	ADD  	A,R5
	MOV  	R5,A
	CLR  	A
	RLC  	A
	MOV  	R4,A
	MOV  	A,R6
	CLR  	C
	SUBB 	A,R5
	MOV  	A,R4
	XRL  	A,#080H
	MOV  	R0,A
	MOV  	A,#080H
	SUBB 	A,R0
	JNC  	?C0067
	MOV  	R0,#LOW (bar_y?1180)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	A,R6
	CLR  	C
	SUBB 	A,R7
	JC   	?C0067
	CLR  	A
	MOV  	R7,A
	LCALL	_lcd_wdat
	MOV  	R7,#011H
	SJMP 	?C0129
?C0067:
; 			else if(line<=hight){lcd_wdat(0x00);lcd_wdat(0x1f);}
			; SOURCE LINE # 212
	MOV  	A,R6
	SETB 	C
	SUBB 	A,R3
	JNC  	?C0062
	CLR  	A
?C0128:
	MOV  	R7,A
	LCALL	_lcd_wdat
	MOV  	R7,#01FH
?C0129:
	LCALL	_lcd_wdat
; 		
; 	}
			; SOURCE LINE # 214
?C0062:
	INC  	R6
	SJMP 	?C0060
; }
			; SOURCE LINE # 215
?C0070:
	RET  	
; END OF _lcd_scrollBar

; void lcd_DrawPoint(uchar X,uchar Y,uchar Color)

	RSEG  ?PR?_lcd_DrawPoint?LCD12864
_lcd_DrawPoint:
	USING	0
			; SOURCE LINE # 216
;---- Variable 'addy?1285' assigned to Register 'R6' ----
	MOV  	R0,#LOW (X?1281)
	MOV  	A,R7
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R3
	MOVX 	@R0,A
;---- Variable 'Y?1282' assigned to Register 'R5' ----
; {
			; SOURCE LINE # 217
;   uchar addx,addy,wordx;
; 	uchar rDat_H,rDat_L;
;   lcd_wcmd(0x36);
			; SOURCE LINE # 220
	MOV  	R7,#036H
	LCALL	_lcd_wcmd
; 	addx=0x80+(X>>4);
			; SOURCE LINE # 221
	DEC  	R0
	MOVX 	A,@R0
	SWAP 	A
	ANL  	A,#0FH
	ADD  	A,#080H
;---- Variable 'addx?1284' assigned to Register 'R1' ----
	MOV  	R1,A
; 	if(Y<32)addy=0x80+Y;else {addy=0x80+Y-32;addx+=8;}
			; SOURCE LINE # 222
	LCALL	L?0141
	MOV  	A,R5
	JNC  	?C0071
	ADD  	A,#080H
	MOV  	R6,A
	SJMP 	?C0072
?C0071:
	ADD  	A,#060H
	MOV  	R6,A
	MOV  	A,#08H
	ADD  	A,R1
	MOV  	R1,A
?C0072:
; 
; 	lcd_wcmd(addy);lcd_wcmd(addx);
			; SOURCE LINE # 224
	LCALL	L?0146
; 	
; 	rDat_H=0;//lcd_rdat();
			; SOURCE LINE # 226
;---- Variable 'rDat_H?1287' assigned to Register 'R5' ----
	CLR  	A
	MOV  	R5,A
; 	rDat_L=0;//lcd_rdat();
			; SOURCE LINE # 227
;---- Variable 'rDat_L?1288' assigned to Register 'R4' ----
	MOV  	R4,A
; 	wordx=X&0x0f;
			; SOURCE LINE # 228
	MOV  	R0,#LOW (X?1281)
	MOVX 	A,@R0
	ANL  	A,#0FH
;---- Variable 'wordx?1286' assigned to Register 'R3' ----
	MOV  	R3,A
; 	lcd_wcmd(addy);lcd_wcmd(addx);
			; SOURCE LINE # 229
	LCALL	L?0146
; 	if(wordx<8)
			; SOURCE LINE # 230
	MOV  	A,R3
	CLR  	C
	SUBB 	A,#08H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0073
; 	{switch(Color)
			; SOURCE LINE # 231
	INC  	R0
	MOVX 	A,@R0
	DEC  	A
	JZ   	?C0076
	DEC  	A
	JZ   	?C0077
	ADD  	A,#02H
	JNZ  	?C0074
; 		{
			; SOURCE LINE # 232
; 			case 0:rDat_H&=(~(0x01<<(7-wordx)));break;
			; SOURCE LINE # 233
?C0075:
	LCALL	L?0134
	SJMP 	?C0113
?C0112:
	CLR  	C
	RLC  	A
?C0113:
	DJNZ 	R0,?C0112
	CPL  	A
	ANL  	A,R5
	MOV  	R5,A
	SJMP 	?C0130
; 			case 1:rDat_H|=((0x01<<(7-wordx)));break;
			; SOURCE LINE # 234
?C0076:
	LCALL	L?0134
	SJMP 	?C0115
?C0114:
	CLR  	C
	RLC  	A
?C0115:
	DJNZ 	R0,?C0114
	ORL  	A,R5
	MOV  	R5,A
	SJMP 	?C0130
; 			case 2:rDat_H^=((0x01<<(7-wordx)));break;
			; SOURCE LINE # 235
?C0077:
	LCALL	L?0135
	SJMP 	?C0117
?C0116:
	CLR  	C
	RLC  	A
?C0117:
	DJNZ 	R0,?C0116
	XRL  	A,R5
	MOV  	R5,A
; 			default:break;
			; SOURCE LINE # 236
; 		}
			; SOURCE LINE # 237
?C0074:
; 		lcd_wdat(rDat_H);lcd_wdat(rDat_L);
			; SOURCE LINE # 238
; 	}
			; SOURCE LINE # 239
	SJMP 	?C0130
?C0073:
; 	else
; 	{
			; SOURCE LINE # 241
; 		//wordx=wordx&0x07;
; 		switch(Color)
			; SOURCE LINE # 243
	MOV  	R0,#LOW (Color?1283)
	MOVX 	A,@R0
	DEC  	A
	JZ   	?C0082
	DEC  	A
	JZ   	?C0083
	ADD  	A,#02H
	JNZ  	?C0080
; 		{
			; SOURCE LINE # 244
; 			case 0:rDat_L&=(~(0x01<<(15-wordx)));break;
			; SOURCE LINE # 245
?C0081:
	MOV  	A,#0FH
	LCALL	L?0136
	SJMP 	?C0119
?C0118:
	CLR  	C
	RLC  	A
?C0119:
	DJNZ 	R0,?C0118
	CPL  	A
	ANL  	A,R4
	MOV  	R4,A
	SJMP 	?C0080
; 			case 1:rDat_L|=((0x01<<(15-wordx)));break;
			; SOURCE LINE # 246
?C0082:
	CLR  	C
	MOV  	A,#0FH
	LCALL	L?0137
	SJMP 	?C0121
?C0120:
	CLR  	C
	RLC  	A
?C0121:
	DJNZ 	R0,?C0120
	ORL  	A,R4
	MOV  	R4,A
	SJMP 	?C0080
; 			case 2:rDat_L^=((0x01<<(15-wordx)));break;
			; SOURCE LINE # 247
?C0083:
	CLR  	C
	MOV  	A,#0FH
	LCALL	L?0137
	SJMP 	?C0123
?C0122:
	CLR  	C
	RLC  	A
?C0123:
	DJNZ 	R0,?C0122
	XRL  	A,R4
	MOV  	R4,A
; 			default:break;
			; SOURCE LINE # 248
; 		}
			; SOURCE LINE # 249
?C0080:
; 		
; 		lcd_wdat(rDat_H);lcd_wdat(rDat_L);
			; SOURCE LINE # 251
?C0130:
	MOV  	R7,AR5
	LCALL	_lcd_wdat
	MOV  	R7,AR4
	LCALL	_lcd_wdat
; 	}
			; SOURCE LINE # 252
; 	
; 	
; }
			; SOURCE LINE # 255
?C0085:
	RET  	
L?0146:
	MOV  	R7,AR6
	LCALL	_lcd_wcmd
	MOV  	R7,AR1
	LCALL	_lcd_wcmd
	RET  	
; END OF _lcd_DrawPoint

; //ª≠ÀÆ∆Ωœﬂ£∫
; void lcd_DrawLineX( uchar X0, uchar X1, uchar Y, uchar Color )

	RSEG  ?PR?_lcd_DrawLineX?LCD12864
_lcd_DrawLineX:
	USING	0
			; SOURCE LINE # 257
	MOV  	R0,#LOW (Y?1391)
	MOV  	A,R3
	MOVX 	@R0,A
;---- Variable 'X0?1389' assigned to Register 'R2' ----
	MOV  	R2,AR7
	DEC  	R0
	MOV  	A,R5
	MOVX 	@R0,A
; {   uchar Temp ;
			; SOURCE LINE # 258
;     if( X0 > X1 )
			; SOURCE LINE # 259
	MOV  	A,R2
	SETB 	C
	SUBB 	A,R5
	JC   	?C0087
;     {
			; SOURCE LINE # 260
;         Temp = X1 ;
			; SOURCE LINE # 261
	MOVX 	A,@R0
	MOV  	R7,A
;---- Variable 'Temp?1393' assigned to Register 'R7' ----
;         X1 = X0 ;
			; SOURCE LINE # 262
	MOV  	A,R2
	MOVX 	@R0,A
;         X0 = Temp ;
			; SOURCE LINE # 263
	MOV  	R2,AR7
;     }
			; SOURCE LINE # 264
;     for( ; X0 <= X1 ; X0++ )
			; SOURCE LINE # 265
?C0087:
	MOV  	R0,#LOW (X1?1390)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	A,R2
	SETB 	C
	SUBB 	A,R7
	JNC  	?C0090
;     lcd_DrawPoint( X0, Y, Color ) ;   
			; SOURCE LINE # 266
	MOV  	R7,AR2
	INC  	R0
	MOVX 	A,@R0
	MOV  	R5,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R3,A
	LCALL	_lcd_DrawPoint
	INC  	R2
	SJMP 	?C0087
; }
			; SOURCE LINE # 267
?C0090:
	RET  	
; END OF _lcd_DrawLineX

; //ª≠¥π÷±œﬂ£∫
; void lcd_DrawLineY( uchar X, uchar Y0, uchar Y1, uchar Color )

	RSEG  ?PR?_lcd_DrawLineY?LCD12864
_lcd_DrawLineY:
	USING	0
			; SOURCE LINE # 269
	MOV  	R0,#LOW (X?1494)
	MOV  	A,R7
	MOVX 	@R0,A
;---- Variable 'Y0?1495' assigned to Register 'R2' ----
	MOV  	R2,AR5
	MOV  	R0,#LOW (Y1?1496)
	MOV  	A,R3
	MOVX 	@R0,A
; {
			; SOURCE LINE # 270
;     uchar Temp ;
;     if( Y0 > Y1 )
			; SOURCE LINE # 272
	MOV  	A,R2
	SETB 	C
	SUBB 	A,R3
	JC   	?C0092
;     {
			; SOURCE LINE # 273
;         Temp = Y1 ;
			; SOURCE LINE # 274
	MOVX 	A,@R0
	MOV  	R7,A
;---- Variable 'Temp?1498' assigned to Register 'R7' ----
;         Y1 = Y0 ;
			; SOURCE LINE # 275
	MOV  	A,R2
	MOVX 	@R0,A
;         Y0 = Temp ;
			; SOURCE LINE # 276
	MOV  	R2,AR7
;     }
			; SOURCE LINE # 277
;     for(; Y0 <= Y1 ; Y0++)
			; SOURCE LINE # 278
?C0092:
	MOV  	R0,#LOW (Y1?1496)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	A,R2
	SETB 	C
	SUBB 	A,R7
	JNC  	?C0095
;     lcd_DrawPoint( X, Y0, Color)    ;
			; SOURCE LINE # 279
	MOV  	R0,#LOW (X?1494)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	R5,AR2
	MOV  	R0,#LOW (Color?1497)
	MOVX 	A,@R0
	MOV  	R3,A
	LCALL	_lcd_DrawPoint
	INC  	R2
	SJMP 	?C0092
; }
			; SOURCE LINE # 280
?C0095:
	RET  	
; END OF _lcd_DrawLineY

; 
; void lcd_DrawLine( uchar StartX, uchar StartY, uchar EndX, uchar EndY, uchar Color )

	RSEG  ?PR?_lcd_DrawLine?LCD12864
_lcd_DrawLine:
	USING	0
			; SOURCE LINE # 282
	MOV  	R0,#LOW (StartX?1599)
	MOV  	A,R7
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R5
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R3
	MOVX 	@R0,A
; {
			; SOURCE LINE # 283
;     int t, distance;      /*∏˘æ›∆¡ƒª¥Û–°∏ƒ±‰±‰¡ø¿‡–Õ(»Á∏ƒŒ™int–Õ)*/
;     int x = 0 , y = 0 , delta_x, delta_y ;
			; SOURCE LINE # 285
	CLR  	A
	MOV  	R0,#LOW (x?15106)
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
;     char incx, incy ;
; 
;     delta_x = EndX - StartX ;
			; SOURCE LINE # 288
	CLR  	C
	MOV  	A,R3
	SUBB 	A,R7
	MOV  	R0,#LOW (delta_x?15108+01H)
	MOVX 	@R0,A
	CLR  	A
	SUBB 	A,#00H
	DEC  	R0
	MOVX 	@R0,A
;     delta_y = EndY - StartY ;
			; SOURCE LINE # 289
	MOV  	A,R5
	MOV  	R7,A
	MOV  	R0,#LOW (EndY?15102)
	MOVX 	A,@R0
	MOV  	R3,A
	CLR  	C
	SUBB 	A,R7
	MOV  	R0,#LOW (delta_y?15109+01H)
	MOVX 	@R0,A
	CLR  	A
	SUBB 	A,#00H
	DEC  	R0
	MOVX 	@R0,A
; 
;     if( delta_x > 0 )
			; SOURCE LINE # 291
	MOV  	R0,#LOW (delta_x?15108)
	LCALL	L?0143
	JC   	?C0096
;     {
			; SOURCE LINE # 292
;         incx = 1;
			; SOURCE LINE # 293
	MOV  	R0,#LOW (incx?15110)
	MOV  	A,#01H
	MOVX 	@R0,A
;     }
			; SOURCE LINE # 294
	SJMP 	?C0097
?C0096:
;     else if( delta_x == 0 )
			; SOURCE LINE # 295
	MOV  	A,R7
	ORL  	A,R6
	JNZ  	?C0098
;     {
			; SOURCE LINE # 296
;         lcd_DrawLineY( StartX, StartY, EndY, Color ) ;
			; SOURCE LINE # 297
	LCALL	L?0139
	MOV  	R0,#LOW (?_lcd_DrawLineY?BYTE+03H)
	MOVX 	@R0,A
	LJMP 	_lcd_DrawLineY
;         return ;
;     }
			; SOURCE LINE # 299
?C0098:
;     else
;     {
			; SOURCE LINE # 301
;         incx = -1 ;
			; SOURCE LINE # 302
	MOV  	R0,#LOW (incx?15110)
	MOV  	A,#0FFH
	MOVX 	@R0,A
;     }
			; SOURCE LINE # 303
?C0097:
;     if( delta_y > 0 )
			; SOURCE LINE # 304
	MOV  	R0,#LOW (delta_y?15109)
	LCALL	L?0143
	JC   	?C0101
;     {
			; SOURCE LINE # 305
;         incy = 1 ;
			; SOURCE LINE # 306
	MOV  	R0,#LOW (incy?15111)
	MOV  	A,#01H
	MOVX 	@R0,A
;     }
			; SOURCE LINE # 307
	SJMP 	?C0102
?C0101:
;     else if(delta_y == 0 )
			; SOURCE LINE # 308
	MOV  	A,R7
	ORL  	A,R6
	JNZ  	?C0103
;     {
			; SOURCE LINE # 309
;         lcd_DrawLineX( StartX, EndX, StartY, Color ) ;   
			; SOURCE LINE # 310
	MOV  	R0,#LOW (StartX?1599)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (EndX?15101)
	MOVX 	A,@R0
	MOV  	R5,A
	DEC  	R0
	MOVX 	A,@R0
	MOV  	R3,A
	MOV  	R0,#LOW (Color?15103)
	MOVX 	A,@R0
	MOV  	R0,#LOW (?_lcd_DrawLineX?BYTE+03H)
	MOVX 	@R0,A
	LJMP 	_lcd_DrawLineX
;         return ;
;     }
			; SOURCE LINE # 312
?C0103:
;     else
;     {
			; SOURCE LINE # 314
;         incy = -1 ;
			; SOURCE LINE # 315
	MOV  	R0,#LOW (incy?15111)
	MOV  	A,#0FFH
	MOVX 	@R0,A
;     }
			; SOURCE LINE # 316
?C0102:
; 
;     delta_x = abs( delta_x );   
			; SOURCE LINE # 318
	MOV  	R0,#LOW (delta_x?15108)
	MOVX 	A,@R0
	MOV  	R6,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R7,A
	LCALL	_abs
	MOV  	R0,#LOW (delta_x?15108)
	MOV  	A,R6
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R7
	MOVX 	@R0,A
;     delta_y = abs( delta_y );
			; SOURCE LINE # 319
	INC  	R0
	MOVX 	A,@R0
	MOV  	R6,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R7,A
	LCALL	_abs
	MOV  	R0,#LOW (delta_y?15109)
	MOV  	A,R6
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R7
	MOVX 	@R0,A
;     if( delta_x > delta_y )
			; SOURCE LINE # 320
	MOV  	R0,#LOW (delta_x?15108)
	LCALL	L?0133
	JC   	?C0105
;     {
			; SOURCE LINE # 321
;         distance = delta_x ;
			; SOURCE LINE # 322
	MOV  	R0,#LOW (distance?15105)
	MOV  	A,R4
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R5
	MOVX 	@R0,A
;     }
			; SOURCE LINE # 323
	SJMP 	?C0106
?C0105:
;     else
;     {
			; SOURCE LINE # 325
;         distance = delta_y ;
			; SOURCE LINE # 326
	MOV  	R0,#LOW (delta_y?15109)
	MOVX 	A,@R0
	MOV  	R7,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R0,#LOW (distance?15105)
	XCH  	A,R7
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,R7
	MOVX 	@R0,A
;     }
			; SOURCE LINE # 327
?C0106:
;     lcd_DrawPoint( StartX, StartY, Color ) ;   
			; SOURCE LINE # 328
	LCALL	L?0139
	MOV  	R3,A
	LCALL	_lcd_DrawPoint
;     /* Draw Line*/
;     for( t = 0 ; t <= distance+1 ; t++ )
			; SOURCE LINE # 330
	CLR  	A
	MOV  	R0,#LOW (t?15104)
	MOVX 	@R0,A
	INC  	R0
	MOVX 	@R0,A
?C0107:
	MOV  	R0,#LOW (distance?15105+01H)
	MOVX 	A,@R0
	ADD  	A,#01H
	MOV  	R7,A
	DEC  	R0
	MOVX 	A,@R0
	ADDC 	A,#00H
	MOV  	R6,A
	SETB 	C
	DEC  	R0
	MOVX 	A,@R0
	SUBB 	A,R7
	MOV  	A,R6
	XRL  	A,#080H
	MOV  	B,A
	DEC  	R0
	MOVX 	A,@R0
	XRL  	A,#080H
	SUBB 	A,B
	JNC  	?C0099
;     {
			; SOURCE LINE # 331
;         lcd_DrawPoint( StartX, StartY, Color ) ;
			; SOURCE LINE # 332
	LCALL	L?0140
	MOV  	R3,A
	LCALL	_lcd_DrawPoint
;         x += delta_x ;
			; SOURCE LINE # 333
	MOV  	R0,#LOW (delta_x?15108)
	MOVX 	A,@R0
	MOV  	R6,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (x?15106+01H)
	MOVX 	A,@R0
	ADD  	A,R7
	MOVX 	@R0,A
	DEC  	R0
	MOVX 	A,@R0
	ADDC 	A,R6
	MOVX 	@R0,A
;         y += delta_y ;
			; SOURCE LINE # 334
	MOV  	R0,#LOW (delta_y?15109)
	MOVX 	A,@R0
	MOV  	R6,A
	INC  	R0
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (y?15107+01H)
	MOVX 	A,@R0
	ADD  	A,R7
	MOVX 	@R0,A
	DEC  	R0
	MOVX 	A,@R0
	ADDC 	A,R6
	MOVX 	@R0,A
;         if( x > distance )
			; SOURCE LINE # 335
	LCALL	L?0144
	INC  	R0
	LCALL	L?0132
	JC   	?C0110
;         {
			; SOURCE LINE # 336
;             x -= distance ;
			; SOURCE LINE # 337
	LCALL	L?0144
	MOV  	R7,A
	MOV  	A,R5
	SUBB 	A,R7
	MOV  	R0,#LOW (x?15106+01H)
	MOVX 	@R0,A
	MOV  	A,R4
	SUBB 	A,R6
	DEC  	R0
	MOVX 	@R0,A
;             StartX += incx ;
			; SOURCE LINE # 338
	MOV  	R0,#LOW (incx?15110)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (StartX?1599)
	MOVX 	A,@R0
	ADD  	A,R7
	MOVX 	@R0,A
;         }
			; SOURCE LINE # 339
?C0110:
;         if( y > distance )
			; SOURCE LINE # 340
	LCALL	L?0145
	MOV  	R0,#LOW (y?15107)
	LCALL	L?0132
	JC   	?C0109
;         {
			; SOURCE LINE # 341
;             y -= distance ;
			; SOURCE LINE # 342
	LCALL	L?0145
	MOV  	R7,A
	MOV  	A,R5
	SUBB 	A,R7
	MOV  	R0,#LOW (y?15107+01H)
	MOVX 	@R0,A
	MOV  	A,R4
	SUBB 	A,R6
	DEC  	R0
	MOVX 	@R0,A
;             StartY += incy ;
			; SOURCE LINE # 343
	MOV  	R0,#LOW (incy?15111)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (StartY?15100)
	MOVX 	A,@R0
	ADD  	A,R7
	MOVX 	@R0,A
;         }
			; SOURCE LINE # 344
;     }
			; SOURCE LINE # 345
?C0109:
	MOV  	R0,#LOW (t?15104+01H)
	MOVX 	A,@R0
	ADD  	A,#01H
	MOVX 	@R0,A
	DEC  	R0
	MOVX 	A,@R0
	ADDC 	A,#00H
	MOVX 	@R0,A
	LJMP 	?C0107
; }			; SOURCE LINE # 346
?C0099:
	RET  	
; END OF _lcd_DrawLine

	END
