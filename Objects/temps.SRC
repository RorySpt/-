; .\Objects\temps.SRC generated from: temps.c
; COMPILER INVOKED BY:
;        D:\Eng-Software\Keil_v5\core\C51\BIN\C51.EXE temps.c COMPACT OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\temps.lst) TABS(2) SRC(.\Objects\temps.SRC)

$NOMOD51

NAME	TEMPS

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
XICON	DATA	0C0H
T0	BIT	0B0H.4
AC	BIT	0D0H.6
P4	DATA	0E8H
T1	BIT	0B0H.5
ISP_TRIG	DATA	0E6H
T2	BIT	090H.0
EA	BIT	0A8H.7
EC	BIT	0A8H.6
FE	BIT	098H.7
IE	DATA	0A8H
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
RI	BIT	098H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
TI	BIT	098H.1
INT1	BIT	0B0H.3
RCAP2H	DATA	0CBH
ISP_CMD	DATA	0E5H
PS	BIT	0B8H.4
SP	DATA	081H
T2EX	BIT	090H.1
OV	BIT	0D0H.2
RCAP2L	DATA	0CAH
C_T2	BIT	0C8H.1
WR	BIT	0B0H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
TEMP_IO	BIT	0B0H.7
P00	BIT	080H.0
SBUF	DATA	099H
PCON	DATA	087H
P10	BIT	090H.0
P01	BIT	080H.1
P20	BIT	0A0H.0
P11	BIT	090H.1
P02	BIT	080H.2
ISP_ADDRH	DATA	0E3H
P30	BIT	0B0H.0
P21	BIT	0A0H.1
P12	BIT	090H.2
P03	BIT	080H.3
SCON	DATA	098H
P31	BIT	0B0H.1
P22	BIT	0A0H.2
P13	BIT	090H.3
P04	BIT	080H.4
P40	BIT	0E8H.0
TMOD	DATA	089H
TCON	DATA	088H
P32	BIT	0B0H.2
P23	BIT	0A0H.3
P14	BIT	090H.4
P05	BIT	080H.5
P41	BIT	0E8H.1
P33	BIT	0B0H.3
P24	BIT	0A0H.4
P15	BIT	090H.5
P06	BIT	080H.6
ISP_ADDRL	DATA	0E4H
P42	BIT	0E8H.2
P34	BIT	0B0H.4
P25	BIT	0A0H.5
P16	BIT	090H.6
P07	BIT	080H.7
P43	BIT	0E8H.3
P35	BIT	0B0H.5
P26	BIT	0A0H.6
P17	BIT	090H.7
P44	BIT	0E8H.4
P36	BIT	0B0H.6
P27	BIT	0A0H.7
P45	BIT	0E8H.5
P37	BIT	0B0H.7
P46	BIT	0E8H.6
IE0	BIT	088H.1
IE1	BIT	088H.3
AUXR	DATA	08EH
B	DATA	0F0H
CP_RL2	BIT	0C8H.0
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
TB8	BIT	098H.3
EX1	BIT	0A8H.2
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
TL2	DATA	0CCH
PT0	BIT	0B8H.1
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
ISP_CONTR	DATA	0E7H
PT2	BIT	0B8H.5
TR0	BIT	088H.4
RS1	BIT	0D0H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
WDT_CONTR	DATA	0E1H
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
IPH	DATA	0B7H
EXEN2	BIT	0C8H.3
REN	BIT	098H.4
T2MOD	DATA	0C9H
T2CON	DATA	0C8H
ISP_DATA	DATA	0E2H
SADEN	DATA	0B9H
RXD	BIT	0B0H.0
SADDR	DATA	0A9H
TXD	BIT	0B0H.1
AUXR1	DATA	0A2H
F0	BIT	0D0H.5
PSW	DATA	0D0H
?PR?Ds18b20_Init?TEMPS                   SEGMENT CODE 
?PD?Ds18b20_Init?TEMPS                   SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?_Ds18b20_wByte?TEMPS                 SEGMENT CODE 
?PD?_Ds18b20_wByte?TEMPS                 SEGMENT XDATA INPAGE OVERLAYABLE 
?PR?Ds18b20_rByte?TEMPS                  SEGMENT CODE 
?PR?Ds18b20_ChangTemp?TEMPS              SEGMENT CODE 
?PR?Ds18b20_rTempcom?TEMPS               SEGMENT CODE 
?PR?Ds18b20_rTemp?TEMPS                  SEGMENT CODE 
?PR?temp_data_collation?TEMPS            SEGMENT CODE 
?PD?TEMPS            SEGMENT XDATA INPAGE 
?PR?TEMPS            SEGMENT CODE 
	EXTRN	CODE (_d_n_ms)
	PUBLIC	temp_data_Integer
	PUBLIC	temp_Low
	PUBLIC	temp_data_sign
	PUBLIC	error
	PUBLIC	temp_data_Decimal_r
	PUBLIC	temp_High
	PUBLIC	temp_data_collation
	PUBLIC	Ds18b20_rTemp
	PUBLIC	Ds18b20_rTempcom
	PUBLIC	Ds18b20_ChangTemp
	PUBLIC	Ds18b20_rByte
	PUBLIC	_Ds18b20_wByte
	PUBLIC	Ds18b20_Init

	RSEG  ?PD?_Ds18b20_wByte?TEMPS
?_Ds18b20_wByte?BYTE:
          i?142:   DS   2

	RSEG  ?PD?Ds18b20_Init?TEMPS
?Ds18b20_Init?BYTE:
          i?040:   DS   1

	RSEG  ?PD?TEMPS
      temp_High:   DS   1
temp_data_Decimal_r:   DS   1
          error:   DS   1
 temp_data_sign:   DS   1
       temp_Low:   DS   1
temp_data_Integer:   DS   1
; #include "temps.h"
; 
; uchar temp_High;
; uchar temp_Low;
; uchar temp_data_sign;//1负，0正
; uchar temp_data_Integer;
; //uchar temp_data_Decimal;//符号位在最高位，小数位在后四位。
; uchar temp_data_Decimal_r;
; uchar error;
; 

	RSEG  ?PR?TEMPS
Com0022:
L?0035:
	USING	0
	SWAP 	A
	ANL  	A,#0F0H
	MOV  	R7,A
	MOV  	R0,#LOW (temp_Low)
	MOVX 	A,@R0
	MOV  	R6,A
	SWAP 	A
	ANL  	A,#0FH
	RET  	
; END OF Com0022

; uchar Ds18b20_Init()

	RSEG  ?PR?Ds18b20_Init?TEMPS
Ds18b20_Init:
	USING	0
			; SOURCE LINE # 11
; {
			; SOURCE LINE # 12
; 	uchar i;
; 	TEMP_IO = 0;			 //将总线拉低480us~960us
			; SOURCE LINE # 14
	CLR  	TEMP_IO
; 	i = 90;	
			; SOURCE LINE # 15
	MOV  	R0,#LOW (i?040)
	MOV  	A,#05AH
	MOVX 	@R0,A
?C0001:
; 	while(i--);//延时642us
			; SOURCE LINE # 16
	MOV  	R0,#LOW (i?040)
	MOVX 	A,@R0
	MOV  	R7,A
	DEC  	A
	MOVX 	@R0,A
	MOV  	A,R7
	JNZ  	?C0001
; 	TEMP_IO = 1;			//然后拉高总线，如果DS18B20做出反应会将在15us~60us后总线拉低
			; SOURCE LINE # 17
	SETB 	TEMP_IO
; 	i = 0;
			; SOURCE LINE # 18
	MOVX 	@R0,A
?C0003:
; 	while(TEMP_IO)	//等待DS18B20拉低总线
			; SOURCE LINE # 19
	JNB  	TEMP_IO,?C0004
; 	{
			; SOURCE LINE # 20
; 		d_n_ms(1);
			; SOURCE LINE # 21
	MOV  	R7,#01H
	MOV  	R6,#00H
	LCALL	_d_n_ms
; 		i++;
			; SOURCE LINE # 22
	MOV  	R0,#LOW (i?040)
	MOVX 	A,@R0
	INC  	A
	MOVX 	@R0,A
; 		if(i>5)//等待>5MS
			; SOURCE LINE # 23
	MOVX 	A,@R0
	SETB 	C
	SUBB 	A,#05H
	MOV  	A,#080H
	SUBB 	A,#080H
	JC   	?C0003
; 		{
			; SOURCE LINE # 24
; 			return 0;//初始化失败
			; SOURCE LINE # 25
	MOV  	R7,#00H
	RET  	
; 		}
			; SOURCE LINE # 26
; 	
; 	}
			; SOURCE LINE # 28
?C0004:
; 	error=1;
			; SOURCE LINE # 29
	MOV  	R0,#LOW (error)
	MOV  	A,#01H
	MOVX 	@R0,A
; 	return 1;//初始化成功
			; SOURCE LINE # 30
	MOV  	R7,A
; }
			; SOURCE LINE # 31
?C0006:
	RET  	
; END OF Ds18b20_Init

; 
; 
; void Ds18b20_wByte(uchar dat)

	RSEG  ?PR?_Ds18b20_wByte?TEMPS
_Ds18b20_wByte:
	USING	0
			; SOURCE LINE # 34
;---- Variable 'dat?141' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 35
; 	uint i, j;
; 	for(j=0; j<8; j++)
			; SOURCE LINE # 37
;---- Variable 'j?143' assigned to Register 'R2/R3' ----
	CLR  	A
	MOV  	R3,A
	MOV  	R2,A
?C0007:
; 	{
			; SOURCE LINE # 38
; 		TEMP_IO = 0;	     	  //每写入一位数据之前先把总线拉低1us
			; SOURCE LINE # 39
	CLR  	TEMP_IO
; 		i++;
			; SOURCE LINE # 40
	MOV  	R0,#LOW (i?142+01H)
	MOVX 	A,@R0
	ADD  	A,#01H
	MOVX 	@R0,A
	DEC  	R0
	MOVX 	A,@R0
	ADDC 	A,#00H
	MOVX 	@R0,A
; 		TEMP_IO = dat & 0x01;  //然后写入一个数据，从最低位开始
			; SOURCE LINE # 41
	MOV  	A,R7
	RRC  	A
	MOV  	TEMP_IO,C
; 		i=6;
			; SOURCE LINE # 42
	CLR  	A
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,#06H
	MOVX 	@R0,A
?C0010:
; 		while(i--); //延时68us，持续时间最少60us
			; SOURCE LINE # 43
	MOV  	R0,#LOW (i?142)
	INC  	R0
	MOVX 	A,@R0
	MOV  	R5,A
	ADD  	A,#0FFH
	MOVX 	@R0,A
	DEC  	R0
	MOVX 	A,@R0
	MOV  	R4,A
	ADDC 	A,#0FFH
	MOVX 	@R0,A
	MOV  	A,R5
	ORL  	A,R4
	JNZ  	?C0010
; 		TEMP_IO = 1;	//然后释放总线，至少1us给总线恢复时间才能接着写入第二个数值
			; SOURCE LINE # 44
	SETB 	TEMP_IO
; 		dat >>= 1;
			; SOURCE LINE # 45
	MOV  	A,R7
	CLR  	C
	RRC  	A
	MOV  	R7,A
; 	}
			; SOURCE LINE # 46
	INC  	R3
	CJNE 	R3,#00H,?C0027
	INC  	R2
?C0027:
	MOV  	A,R3
	XRL  	A,#08H
	ORL  	A,R2
	JNZ  	?C0007
; }
			; SOURCE LINE # 47
?C0012:
	RET  	
; END OF _Ds18b20_wByte

; 
; uchar Ds18b20_rByte()

	RSEG  ?PR?Ds18b20_rByte?TEMPS
Ds18b20_rByte:
	USING	0
			; SOURCE LINE # 49
;---- Variable 'i?246' assigned to Register 'R6/R7' ----
;---- Variable 'byte?244' assigned to Register 'R1' ----
; {
			; SOURCE LINE # 50
; 	
; 	uchar byte, bi;
; 	uint i, j;	
; 	for(j=8; j>0; j--)
			; SOURCE LINE # 54
;---- Variable 'j?247' assigned to Register 'R4/R5' ----
	MOV  	R5,#08H
	MOV  	R4,#00H
?C0013:
; 	{
			; SOURCE LINE # 55
; 		TEMP_IO = 0;//先将总线拉低1us
			; SOURCE LINE # 56
	CLR  	TEMP_IO
; 		i++;
			; SOURCE LINE # 57
	INC  	R7
	CJNE 	R7,#00H,?C0028
?C0028:
; 		TEMP_IO = 1;//然后释放总线
			; SOURCE LINE # 58
	SETB 	TEMP_IO
; 		i++;
			; SOURCE LINE # 59
	INC  	R7
	CJNE 	R7,#00H,?C0029
?C0029:
; 		i++;//延时6us等待数据稳定
			; SOURCE LINE # 60
	INC  	R7
	CJNE 	R7,#00H,?C0030
?C0030:
; 		bi = TEMP_IO;	 //读取数据，从最低位开始读取
			; SOURCE LINE # 61
	MOV  	C,TEMP_IO
	CLR  	A
	RLC  	A
;---- Variable 'bi?245' assigned to Register 'R3' ----
; 		/*将byte左移一位，然后与上右移7位后的bi，注意移动之后移掉那位补0。*/
; 		byte = (byte >> 1) | (bi << 7);						  
			; SOURCE LINE # 63
	SWAP 	A
	RLC  	A
	RLC  	A
	RLC  	A
	ANL  	A,#080H
	MOV  	R3,A
	MOV  	A,R1
	CLR  	C
	RRC  	A
	ORL  	A,R3
	MOV  	R1,A
; 		i = 4;		//读取完之后等待48us再接着读取下一个数
			; SOURCE LINE # 64
	MOV  	R6,#00H
	MOV  	R7,#04H
?C0016:
; 		while(i--);
			; SOURCE LINE # 65
	MOV  	A,R7
	DEC  	R7
	MOV  	R2,AR6
	JNZ  	?C0031
	DEC  	R6
?C0031:
	ORL  	A,R2
	JNZ  	?C0016
; 	}				
			; SOURCE LINE # 66
	MOV  	A,R5
	DEC  	R5
	JNZ  	?C0032
	DEC  	R4
?C0032:
	MOV  	A,R5
	ORL  	A,R4
	JNZ  	?C0013
?C0014:
; 	return byte;
			; SOURCE LINE # 67
	MOV  	R7,AR1
; }
			; SOURCE LINE # 68
	RET  	
; END OF Ds18b20_rByte

; /*******************************************************************************
; * 函 数 名         : Ds18b20ChangTemp
; * 函数功能		   : 让18b20开始转换温度
; * 输    入         : 无
; * 输    出         : 无
; *******************************************************************************/
; 
; void  Ds18b20_ChangTemp()

	RSEG  ?PR?Ds18b20_ChangTemp?TEMPS
Ds18b20_ChangTemp:
	USING	0
			; SOURCE LINE # 76
; {
			; SOURCE LINE # 77
; 	Ds18b20_Init();
			; SOURCE LINE # 78
	LCALL	Ds18b20_Init
; 	{d_n_ms(1);
			; SOURCE LINE # 79
	MOV  	R7,#01H
	MOV  	R6,#00H
	LCALL	_d_n_ms
; 	Ds18b20_wByte(0xcc);		//跳过ROM操作命令		 
			; SOURCE LINE # 80
	MOV  	R7,#0CCH
	LCALL	_Ds18b20_wByte
; 	Ds18b20_wByte(0x44);	    //温度转换命令
			; SOURCE LINE # 81
	MOV  	R7,#044H
	LJMP 	_Ds18b20_wByte
; END OF Ds18b20_ChangTemp

; 	//d_n_ms(100);	//等待转换成功，而如果你是一直刷着的话，就不用这个延时了
; 	}
; }
; 
; void  Ds18b20_rTempcom()

	RSEG  ?PR?Ds18b20_rTempcom?TEMPS
Ds18b20_rTempcom:
	USING	0
			; SOURCE LINE # 86
; {	
			; SOURCE LINE # 87
; 
; 	Ds18b20_Init();
			; SOURCE LINE # 89
	LCALL	Ds18b20_Init
; 	d_n_ms(1);
			; SOURCE LINE # 90
	MOV  	R7,#01H
	MOV  	R6,#00H
	LCALL	_d_n_ms
; 	Ds18b20_wByte(0xcc);	 //跳过ROM操作命令
			; SOURCE LINE # 91
	MOV  	R7,#0CCH
	LCALL	_Ds18b20_wByte
; 	Ds18b20_wByte(0xbe);	 //发送读取温度命令
			; SOURCE LINE # 92
	MOV  	R7,#0BEH
	LJMP 	_Ds18b20_wByte
; END OF Ds18b20_rTempcom

; }
; /*******************************************************************************
; * 函 数 名         : Ds18b20ReadTemp
; * 函数功能		   : 读取温度
; * 输    入         : 无
; * 输    出         : 无
; *******************************************************************************/
; 
; void Ds18b20_rTemp()

	RSEG  ?PR?Ds18b20_rTemp?TEMPS
Ds18b20_rTemp:
	USING	0
			; SOURCE LINE # 101
; {
			; SOURCE LINE # 102
; 
; 	//Ds18b20_ChangTemp();			 	//先写入转换命令
; 	Ds18b20_rTempcom();			//然后等待转换完后发送读取温度命令
			; SOURCE LINE # 105
	LCALL	Ds18b20_rTempcom
; 	temp_Low = Ds18b20_rByte();		//读取温度值共16位，先读低字节
			; SOURCE LINE # 106
	LCALL	Ds18b20_rByte
	MOV  	R0,#LOW (temp_Low)
	MOV  	A,R7
	MOVX 	@R0,A
; 	temp_High = Ds18b20_rByte();		//再读高字节
			; SOURCE LINE # 107
	LCALL	Ds18b20_rByte
	MOV  	R0,#LOW (temp_High)
	MOV  	A,R7
	MOVX 	@R0,A
; }
			; SOURCE LINE # 108
	RET  	
; END OF Ds18b20_rTemp

; 
; void temp_data_collation()

	RSEG  ?PR?temp_data_collation?TEMPS
temp_data_collation:
	USING	0
			; SOURCE LINE # 110
; {
			; SOURCE LINE # 111
; 		if(temp_High&0xf0){
			; SOURCE LINE # 112
	MOV  	R0,#LOW (temp_High)
	MOVX 	A,@R0
	MOV  	R7,A
	ANL  	A,#0F0H
	JZ   	?C0022
; 			temp_data_Integer=~((temp_Low>>4)+(temp_High<<4))+1;
			; SOURCE LINE # 113
	MOV  	A,R7
	LCALL	L?0035
	ADD  	A,R7
	CPL  	A
	INC  	A
	INC  	R0
	MOVX 	@R0,A
; 			temp_data_Decimal_r=6*(0x10-(temp_Low&0x0f))+(0x10-(temp_Low&0x0f))/4;
			; SOURCE LINE # 114
	MOV  	A,R6
	ANL  	A,#0FH
	MOV  	R5,A
	MOV  	R7,A
	CLR  	C
	MOV  	A,#010H
	SUBB 	A,R7
	MOV  	R7,A
	CLR  	A
	SUBB 	A,#00H
	MOV  	R6,A
	MOV  	A,R7
	MOV  	R0,#02H
?C0033:
	XCH  	A,R6
	CLR  	C
	RRC  	A
	XCH  	A,R6
	RRC  	A
	DJNZ 	R0,?C0033
	MOV  	R7,A
	CLR  	C
	MOV  	A,#010H
	SUBB 	A,R5
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,R7
	MOV  	R0,#LOW (temp_data_Decimal_r)
	MOVX 	@R0,A
; 			temp_data_sign=1;
			; SOURCE LINE # 115
	MOV  	R0,#LOW (temp_data_sign)
	MOV  	A,#01H
	MOVX 	@R0,A
; 		}
			; SOURCE LINE # 116
	SJMP 	?C0023
?C0022:
; 		else
; 		{
			; SOURCE LINE # 118
; 			temp_data_Integer=(temp_Low>>4)|(temp_High<<4);
			; SOURCE LINE # 119
	MOV  	R0,#LOW (temp_High)
	MOVX 	A,@R0
	LCALL	L?0035
	ORL  	A,R7
	INC  	R0
	MOVX 	@R0,A
; 			temp_data_Decimal_r=6*(temp_Low&0x0f)+(temp_Low&0x0f)/4;
			; SOURCE LINE # 120
	MOV  	A,R6
	ANL  	A,#0FH
	MOV  	R7,A
	RRC  	A
	RRC  	A
	ANL  	A,#03FH
	MOV  	R6,A
	MOV  	A,R7
	MOV  	B,#06H
	MUL  	AB
	ADD  	A,R6
	MOV  	R0,#LOW (temp_data_Decimal_r)
	MOVX 	@R0,A
; 			temp_data_sign=0;
			; SOURCE LINE # 121
	CLR  	A
	MOV  	R0,#LOW (temp_data_sign)
	MOVX 	@R0,A
; 		}
			; SOURCE LINE # 122
?C0023:
; 		if(temp_data_Decimal_r%10>4)temp_data_Decimal_r=temp_data_Decimal_r/10+1;
			; SOURCE LINE # 123
	MOV  	R0,#LOW (temp_data_Decimal_r)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	B,#0AH
	DIV  	AB
	MOV  	A,B
	SETB 	C
	SUBB 	A,#04H
	MOV  	A,#080H
	SUBB 	A,#080H
	JC   	?C0024
	MOV  	A,R7
	MOV  	B,#0AH
	DIV  	AB
	INC  	A
	MOVX 	@R0,A
	RET  	
?C0024:
; 		else temp_data_Decimal_r/=10;
			; SOURCE LINE # 124
	MOV  	R0,#LOW (temp_data_Decimal_r)
	MOVX 	A,@R0
	MOV  	B,#0AH
	DIV  	AB
	MOVX 	@R0,A
; }
			; SOURCE LINE # 125
?C0026:
	RET  	
; END OF temp_data_collation

	END
