; .\Objects\button.SRC generated from: button.c
; COMPILER INVOKED BY:
;        D:\Eng-Software\Keil_v5\core\C51\BIN\C51.EXE button.c COMPACT OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\button.lst) TABS(2) SRC(.\Objects\button.SRC)

$NOMOD51

NAME	BUTTON

DS_CE	BIT	0A0H.0
P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
XICON	DATA	0C0H
T0	BIT	0B0H.4
AC	BIT	0D0H.6
P4	DATA	0E8H
T1	BIT	0B0H.5
ISP_TRIG	DATA	0E6H
T2	BIT	090H.0
EA	BIT	0A8H.7
EC	BIT	0A8H.6
FE	BIT	098H.7
IE	DATA	0A8H
DS_IO	BIT	0A0H.1
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
KEY0	BIT	0B0H.1
KEY1	BIT	0B0H.0
RI	BIT	098H.0
KEY2	BIT	0B0H.2
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
KEY3	BIT	0B0H.3
TI	BIT	098H.1
INT1	BIT	0B0H.3
RCAP2H	DATA	0CBH
ISP_CMD	DATA	0E5H
PS	BIT	0B8H.4
SP	DATA	081H
T2EX	BIT	090H.1
OV	BIT	0D0H.2
DS_SCLK	BIT	0A0H.2
RCAP2L	DATA	0CAH
C_T2	BIT	0C8H.1
WR	BIT	0B0H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
P00	BIT	080H.0
SBUF	DATA	099H
PCON	DATA	087H
P10	BIT	090H.0
P01	BIT	080H.1
P20	BIT	0A0H.0
P11	BIT	090H.1
P02	BIT	080H.2
ISP_ADDRH	DATA	0E3H
P30	BIT	0B0H.0
P21	BIT	0A0H.1
P12	BIT	090H.2
P03	BIT	080H.3
SCON	DATA	098H
P31	BIT	0B0H.1
P22	BIT	0A0H.2
P13	BIT	090H.3
P04	BIT	080H.4
P40	BIT	0E8H.0
TMOD	DATA	089H
TCON	DATA	088H
P32	BIT	0B0H.2
P23	BIT	0A0H.3
P14	BIT	090H.4
P05	BIT	080H.5
P41	BIT	0E8H.1
P33	BIT	0B0H.3
P24	BIT	0A0H.4
P15	BIT	090H.5
P06	BIT	080H.6
ISP_ADDRL	DATA	0E4H
P42	BIT	0E8H.2
P34	BIT	0B0H.4
P25	BIT	0A0H.5
P16	BIT	090H.6
P07	BIT	080H.7
P43	BIT	0E8H.3
P35	BIT	0B0H.5
P26	BIT	0A0H.6
P17	BIT	090H.7
P44	BIT	0E8H.4
P36	BIT	0B0H.6
P27	BIT	0A0H.7
P45	BIT	0E8H.5
P37	BIT	0B0H.7
P46	BIT	0E8H.6
IE0	BIT	088H.1
IE1	BIT	088H.3
AUXR	DATA	08EH
B	DATA	0F0H
CP_RL2	BIT	0C8H.0
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
TB8	BIT	098H.3
EX1	BIT	0A8H.2
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
TL2	DATA	0CCH
PT0	BIT	0B8H.1
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
ISP_CONTR	DATA	0E7H
PT2	BIT	0B8H.5
TR0	BIT	088H.4
RS1	BIT	0D0H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
WDT_CONTR	DATA	0E1H
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
IPH	DATA	0B7H
EXEN2	BIT	0C8H.3
REN	BIT	098H.4
T2MOD	DATA	0C9H
T2CON	DATA	0C8H
ISP_DATA	DATA	0E2H
SADEN	DATA	0B9H
RXD	BIT	0B0H.0
SADDR	DATA	0A9H
TXD	BIT	0B0H.1
AUXR1	DATA	0A2H
F0	BIT	0D0H.5
PSW	DATA	0D0H
?PR?control_Section?BUTTON               SEGMENT CODE 
?PR?recognition_key?BUTTON               SEGMENT CODE 
?C_INITSEG           SEGMENT CODE 
?DT?BUTTON           SEGMENT DATA 
?PD?BUTTON           SEGMENT XDATA INPAGE 
?BA?BUTTON           SEGMENT DATA BITADDRESSABLE 
?PR?BUTTON           SEGMENT CODE 
	EXTRN	XDATA (Sensor_display_switchingSpeed)
	EXTRN	CODE (_Ds1302_time_Copy)
	EXTRN	XDATA (ds_dat_time_set16)
	EXTRN	CODE (Ds1302_Set_time)
	EXTRN	XDATA (rot_taskFrequency)
	EXTRN	DATA (menuCode)
	EXTRN	CODE (_Calculate_Totaldays_Ofmonth)
	EXTRN	XDATA (SwitchFlag)
	EXTRN	XDATA (Sensor_switch)
	PUBLIC	OptionCode
	PUBLIC	Prestate_key
	PUBLIC	Command_key
	PUBLIC	Change_sign
	PUBLIC	Instruction_code_key
	PUBLIC	Double_Press_counter
	PUBLIC	Double_Idle_counter
	PUBLIC	Refill_sign_7
	PUBLIC	Refill_sign_6
	PUBLIC	Refill_sign_5
	PUBLIC	Refill_sign_4
	PUBLIC	Refill_sign_3
	PUBLIC	Refill_sign_2
	PUBLIC	Refill_sign_1
	PUBLIC	Refill_sign_0
	PUBLIC	Refill_sign
	PUBLIC	OptionCode_Max
	PUBLIC	Curstatus_key
	PUBLIC	recognition_key
	PUBLIC	control_Section

	RSEG  ?DT?BUTTON
  Curstatus_key:   DS   4
Double_Idle_counter:   DS   8
Double_Press_counter:   DS   8
Instruction_code_key:   DS   4
    Command_key:   DS   4
   Prestate_key:   DS   4

	RSEG  ?PD?BUTTON
 OptionCode_Max:   DS   3
    Change_sign:   DS   1
     OptionCode:   DS   3

	RSEG  ?BA?BUTTON
    Refill_sign:   DS   1
Refill_sign_0	EQU	(Refill_sign+0).0
Refill_sign_1	EQU	(Refill_sign+0).1
Refill_sign_2	EQU	(Refill_sign+0).2
Refill_sign_3	EQU	(Refill_sign+0).3
Refill_sign_4	EQU	(Refill_sign+0).4
Refill_sign_5	EQU	(Refill_sign+0).5
Refill_sign_6	EQU	(Refill_sign+0).6
Refill_sign_7	EQU	(Refill_sign+0).7

	RSEG  ?C_INITSEG
	DB	083H
	DB	LOW (OptionCode)
	DB	000H
	DB	005H
	DB	006H

	DB	083H
	DB	LOW (OptionCode_Max)
	DB	006H
	DB	005H
	DB	004H

	DB	081H
	DB	LOW (Change_sign)
	DB	000H

; #include "button.h"
; #include "ds1302.h"
; #include "calendar.h"
; //#define KEY(i) KEY##i
; uchar data Command_key[4];//
; uchar data Prestate_key[4];//按键前状态
; uchar data Curstatus_key[4];//按键当前状态
; uchar data Instruction_code_key[4];
; uint data Double_Press_counter[4];//长按计数器
; uint data Double_Idle_counter[4];//空闲计数器
; //uint data Double_idle_counter[4];//空闲标志
; 
; uchar bdata Refill_sign;
; sbit Refill_sign_0=Refill_sign^0;
; sbit Refill_sign_1=Refill_sign^1;
; sbit Refill_sign_2=Refill_sign^2;
; sbit Refill_sign_3=Refill_sign^3;
; sbit Refill_sign_4=Refill_sign^4;
; sbit Refill_sign_5=Refill_sign^5;
; sbit Refill_sign_6=Refill_sign^6;
; sbit Refill_sign_7=Refill_sign^7;
; 
; #define button_BurstSpeed 2
; 
; #define goIn 								(Instruction_code_key[0]==0x80)
; #define goBack 							(Instruction_code_key[1]==0x80)
; #define	goUp								(Instruction_code_key[2]==0x80)
; #define	goDown							(Instruction_code_key[3]==0x80)
; #define BurstGoin  					((Double_Press_counter[0]%button_BurstSpeed)==1)
; #define BurstGoback 				((Double_Press_counter[1]%button_BurstSpeed)==1)
; #define BurstGoup 					((Double_Press_counter[2]%button_BurstSpeed)==1)
; #define BurstGodown					((Double_Press_counter[3]%button_BurstSpeed)==1)
; 
; 
; extern uchar data menuCode;
; uchar OptionCode[]={0,5,6};
; uchar OptionCode_Max[]={6,5,4};
; 
; extern uchar SwitchFlag[];
; 
; 
; extern uchar Sensor_switch[2];
; extern uint rot_taskFrequency[];
; extern uint Sensor_display_switchingSpeed;
; uchar Change_sign=0;
; 

	RSEG  ?PR?BUTTON
Com00C1:
L?0194:
	USING	0
L?0195:
	MOVX 	A,@R0
	SETB 	C
	SUBB 	A,#00H
	MOV  	A,#080H
	SUBB 	A,#080H
	RET  	
L?0196:
	USING	0
	SETB 	C
L?0197:
	MOVX 	A,@R0
L?0198:
	SUBB 	A,#01H
	MOV  	A,#080H
	SUBB 	A,#080H
	RET  	
L?0199:
	USING	0
	CLR  	C
L?0200:
	MOVX 	A,@R0
	SUBB 	A,#070H
	DEC  	R0
	MOVX 	A,@R0
	SUBB 	A,#017H
	RET  	
L?0201:
	USING	0
	SETB 	C
L?0202:
	MOVX 	A,@R0
	SUBB 	A,#064H
	DEC  	R0
	MOVX 	A,@R0
	SUBB 	A,#00H
	RET  	
L?0204:
	USING	0
	MOV  	R0,#LOW (OptionCode+01H)
	MOVX 	A,@R0
	CLR  	C
	SUBB 	A,#06H
	MOV  	A,#080H
	SUBB 	A,#080H
	RET  	
L?0205:
	USING	0
	MOV  	A,#LOW (Curstatus_key)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R6,A
	MOV  	A,#LOW (Prestate_key)
	ADD  	A,R7
	MOV  	R0,A
	RET  	
L?0206:
	USING	0
	MOV  	A,R7
	ADD  	A,ACC
	ADD  	A,#LOW (Double_Press_counter)
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
	RET  	
; END OF Com00C1

; void control_Section()

	RSEG  ?PR?control_Section?BUTTON
control_Section:
	USING	0
			; SOURCE LINE # 47
; {
			; SOURCE LINE # 48
; 	switch(menuCode)
			; SOURCE LINE # 49
	MOV  	A,menuCode
	DEC  	A
	JZ   	?C0010
	ADD  	A,#0F7H
	JNZ  	$ + 5H
	LJMP 	?C0029
	DEC  	A
	JNZ  	$ + 5H
	LJMP 	?C0095
	ADD  	A,#0A7H
	JNZ  	$ + 5H
	LJMP 	?C0088
	ADD  	A,#064H
	JZ   	$ + 5H
	LJMP 	?C0144
; 	{
			; SOURCE LINE # 50
; 		case 0:	
			; SOURCE LINE # 51
?C0002:
; 		{	if(goIn) {menuCode=1;Refill_sign_0=0;}	
			; SOURCE LINE # 52
	MOV  	A,Instruction_code_key
	XRL  	A,#080H
	JNZ  	?C0003
	MOV  	menuCode,#01H
	CLR  	Refill_sign_0
?C0003:
; 			if(goDown&&Refill_sign_3){if(SwitchFlag[0]<2)SwitchFlag[0]++;else SwitchFlag[0]=0;}
			; SOURCE LINE # 53
	MOV  	A,Instruction_code_key+03H
	XRL  	A,#080H
	JNZ  	?C0004
	JNB  	Refill_sign_3,?C0004
	MOV  	R0,#LOW (SwitchFlag)
	MOVX 	A,@R0
	CLR  	C
	SUBB 	A,#02H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0005
	MOVX 	A,@R0
	INC  	A
	MOVX 	@R0,A
	SJMP 	?C0004
?C0005:
	CLR  	A
	MOV  	R0,#LOW (SwitchFlag)
	MOVX 	@R0,A
?C0004:
; 			if(goUp&&Refill_sign_2){if(SwitchFlag[1]<3)SwitchFlag[1]++;else SwitchFlag[1]=0;}
			; SOURCE LINE # 54
	MOV  	A,Instruction_code_key+02H
	XRL  	A,#080H
	JZ   	$ + 5H
	LJMP 	?C0144
	JB   	Refill_sign_2,$ + 6H
	LJMP 	?C0144
	MOV  	R0,#LOW (SwitchFlag+01H)
	MOVX 	A,@R0
	CLR  	C
	SUBB 	A,#03H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0008
	MOVX 	A,@R0
	INC  	A
	MOVX 	@R0,A
	RET  	
?C0008:
	CLR  	A
	MOV  	R0,#LOW (SwitchFlag+01H)
	MOVX 	@R0,A
; 			//if(goUp&Refill_sign_2){if(ds_dat_time_set[3]<29)ds_dat_time_set[3]++;else ds_dat_time_set[3]=0;Ds1302_Set_time();}
; 		break;}
			; SOURCE LINE # 56
	RET  	
; 		case 1:
			; SOURCE LINE # 57
?C0010:
; 		{	if(goBack&Refill_sign_1)menuCode=0;
			; SOURCE LINE # 58
	MOV  	A,Instruction_code_key+01H
	XRL  	A,#080H
	JNZ  	?C0012
	MOV  	R7,#01H
	SJMP 	?C0013
?C0012:
	MOV  	R7,#00H
?C0013:
	MOV  	C,Refill_sign_1
	CLR  	A
	RLC  	A
	ANL  	A,R7
	JZ   	?C0011
	CLR  	A
	MOV  	menuCode,A
?C0011:
; 			if(goUp&Refill_sign_2){if(OptionCode[0]<OptionCode_Max[0])OptionCode[0]++;else OptionCode[0]=0;}
			; SOURCE LINE # 59
	MOV  	A,Instruction_code_key+02H
	XRL  	A,#080H
	JNZ  	?C0015
	MOV  	R7,#01H
	SJMP 	?C0016
?C0015:
	MOV  	R7,#00H
?C0016:
	MOV  	C,Refill_sign_2
	CLR  	A
	RLC  	A
	ANL  	A,R7
	JZ   	?C0014
	MOV  	R0,#LOW (OptionCode_Max)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (OptionCode)
	MOVX 	A,@R0
	CLR  	C
	SUBB 	A,R7
	JNC  	?C0017
	MOVX 	A,@R0
	INC  	A
	MOVX 	@R0,A
	SJMP 	?C0014
?C0017:
	CLR  	A
	MOV  	R0,#LOW (OptionCode)
	MOVX 	@R0,A
?C0014:
; 			if(goDown&Refill_sign_3)if(OptionCode[0]>0)OptionCode[0]--; else OptionCode[0]=OptionCode_Max[0];
			; SOURCE LINE # 60
	MOV  	A,Instruction_code_key+03H
	XRL  	A,#080H
	JNZ  	?C0020
	MOV  	R7,#01H
	SJMP 	?C0021
?C0020:
	MOV  	R7,#00H
?C0021:
	MOV  	C,Refill_sign_3
	CLR  	A
	RLC  	A
	ANL  	A,R7
	JZ   	?C0019
	MOV  	R0,#LOW (OptionCode)
	LCALL	L?0194
	JC   	?C0022
	MOVX 	A,@R0
	DEC  	A
	MOVX 	@R0,A
	SJMP 	?C0019
?C0022:
	MOV  	R0,#LOW (OptionCode_Max)
	MOVX 	A,@R0
	MOV  	R0,#LOW (OptionCode)
	MOVX 	@R0,A
?C0019:
; 			if(goIn&Refill_sign_0){if(OptionCode[0]<2)menuCode=OptionCode[0]+10;else menuCode=10; Refill_sign_0=0;}
			; SOURCE LINE # 61
	MOV  	A,Instruction_code_key
	XRL  	A,#080H
	JNZ  	?C0025
	MOV  	R7,#01H
	SJMP 	?C0026
?C0025:
	MOV  	R7,#00H
?C0026:
	MOV  	C,Refill_sign_0
	CLR  	A
	RLC  	A
	ANL  	A,R7
	JNZ  	$ + 5H
	LJMP 	?C0144
	MOV  	R0,#LOW (OptionCode)
	MOVX 	A,@R0
	MOV  	R7,A
	CLR  	C
	SUBB 	A,#02H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0027
	MOV  	A,R7
	ADD  	A,#0AH
	MOV  	menuCode,A
	SJMP 	?C0028
?C0027:
	MOV  	menuCode,#0AH
?C0028:
	CLR  	Refill_sign_0
; 			break;
			; SOURCE LINE # 62
	RET  	
; 		}
			; SOURCE LINE # 63
; 		case 10:
			; SOURCE LINE # 64
?C0029:
; 		{
			; SOURCE LINE # 65
; 			if(goBack&Refill_sign_1){if(Change_sign==0)menuCode=1;if(Change_sign==1){menuCode=100;Change_sign=0;}}
			; SOURCE LINE # 66
	MOV  	A,Instruction_code_key+01H
	XRL  	A,#080H
	JNZ  	?C0031
	MOV  	R7,#01H
	SJMP 	?C0032
?C0031:
	MOV  	R7,#00H
?C0032:
	MOV  	C,Refill_sign_1
	CLR  	A
	RLC  	A
	ANL  	A,R7
	JZ   	?C0030
	MOV  	R0,#LOW (Change_sign)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	R6,#00H
	JNZ  	?C0033
	MOV  	menuCode,#01H
?C0033:
	MOV  	A,R7
	XRL  	A,#01H
	ORL  	A,R6
	JNZ  	?C0030
	MOV  	menuCode,#064H
	MOV  	R0,#LOW (Change_sign)
	MOVX 	@R0,A
?C0030:
; 			if(goIn&Refill_sign_0){if(OptionCode[1]<OptionCode_Max[1])OptionCode[1]++;else OptionCode[1]=0;}
			; SOURCE LINE # 67
	MOV  	A,Instruction_code_key
	XRL  	A,#080H
	JNZ  	?C0036
	MOV  	R7,#01H
	SJMP 	?C0037
?C0036:
	MOV  	R7,#00H
?C0037:
	MOV  	C,Refill_sign_0
	CLR  	A
	RLC  	A
	ANL  	A,R7
	JZ   	?C0035
	MOV  	R0,#LOW (OptionCode_Max+01H)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (OptionCode+01H)
	MOVX 	A,@R0
	CLR  	C
	SUBB 	A,R7
	JNC  	?C0038
	MOVX 	A,@R0
	INC  	A
	MOVX 	@R0,A
	SJMP 	?C0035
?C0038:
	CLR  	A
	MOV  	R0,#LOW (OptionCode+01H)
	MOVX 	@R0,A
?C0035:
; 			if(BurstGoup||(goUp&Refill_sign_2))
			; SOURCE LINE # 68
	MOV  	A,Double_Press_counter+05H
	JB   	ACC.0,?C0041
	MOV  	A,Instruction_code_key+02H
	XRL  	A,#080H
	JNZ  	?C0042
	MOV  	R7,#01H
	SJMP 	?C0043
?C0042:
	MOV  	R7,#00H
?C0043:
	MOV  	C,Refill_sign_2
	CLR  	A
	RLC  	A
	ANL  	A,R7
	JNZ  	$ + 5H
	LJMP 	?C0040
?C0041:
; 			{
			; SOURCE LINE # 69
; 				if(OptionCode[1]<6)Change_sign=1;
			; SOURCE LINE # 70
	LCALL	L?0204
	JNC  	?C0044
	MOV  	R0,#LOW (Change_sign)
	MOV  	A,#01H
	MOVX 	@R0,A
?C0044:
; 				 Ds1302_time_Copy(1);
			; SOURCE LINE # 71
	MOV  	R7,#01H
	LCALL	_Ds1302_time_Copy
; 				switch(OptionCode[1])
			; SOURCE LINE # 72
	MOV  	R0,#LOW (OptionCode+01H)
	MOVX 	A,@R0
	JZ   	?C0055
	DEC  	A
	JZ   	?C0058
	DEC  	A
	JZ   	?C0061
	ADD  	A,#0FEH
	JZ   	?C0049
	DEC  	A
	JZ   	?C0052
	ADD  	A,#02H
	JNZ  	?C0045
; 				{
			; SOURCE LINE # 73
; 					case 3:{if(ds_dat_time_set16[6]<99)ds_dat_time_set16[6]++;else ds_dat_time_set16[6]=0;}break;
			; SOURCE LINE # 74
?C0046:
	MOV  	R0,#LOW (ds_dat_time_set16+06H)
	MOVX 	A,@R0
	CLR  	C
	SUBB 	A,#063H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0047
	SJMP 	?C0174
?C0047:
	CLR  	A
	MOV  	R0,#LOW (ds_dat_time_set16+06H)
	MOVX 	@R0,A
	SJMP 	?C0045
; 					case 4:{if(ds_dat_time_set16[4]<12)ds_dat_time_set16[4]++;else ds_dat_time_set16[4]=1;}break;
			; SOURCE LINE # 75
?C0049:
	MOV  	R0,#LOW (ds_dat_time_set16+04H)
	MOVX 	A,@R0
	CLR  	C
	SUBB 	A,#0CH
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0050
?C0169:
	SJMP 	?C0174
?C0050:
	MOV  	R0,#LOW (ds_dat_time_set16+04H)
	SJMP 	?C0171
; 					case 5:{if(ds_dat_time_set16[3]<Calculate_Totaldays_Ofmonth(ds_dat_time_set16[6],ds_dat_time_set16[4]))ds_dat_time_set16[3]++;else ds_dat_time_set16[3]=1;}break;
			; SOURCE LINE # 76
?C0052:
	LCALL	L?0203
	MOVX 	A,@R0
	CLR  	C
	SUBB 	A,R7
	JNC  	?C0053
?C0170:
	SJMP 	?C0174
?C0053:
	MOV  	R0,#LOW (ds_dat_time_set16+03H)
?C0171:
	MOV  	A,#01H
	MOVX 	@R0,A
	SJMP 	?C0045
; 					case 0:{if(ds_dat_time_set16[2]<23)ds_dat_time_set16[2]++;else ds_dat_time_set16[2]=0;}break;
			; SOURCE LINE # 77
?C0055:
	MOV  	R0,#LOW (ds_dat_time_set16+02H)
	MOVX 	A,@R0
	CLR  	C
	SUBB 	A,#017H
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0056
?C0172:
	SJMP 	?C0174
?C0056:
	CLR  	A
	MOV  	R0,#LOW (ds_dat_time_set16+02H)
	MOVX 	@R0,A
	SJMP 	?C0045
; 					case 1:{if(ds_dat_time_set16[1]<59)ds_dat_time_set16[1]++;else ds_dat_time_set16[1]=0;}break;
			; SOURCE LINE # 78
?C0058:
	MOV  	R0,#LOW (ds_dat_time_set16+01H)
	MOVX 	A,@R0
	CLR  	C
	SUBB 	A,#03BH
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0059
?C0173:
	SJMP 	?C0174
?C0059:
	CLR  	A
	MOV  	R0,#LOW (ds_dat_time_set16+01H)
	MOVX 	@R0,A
	SJMP 	?C0045
; 					case 2:{if(ds_dat_time_set16[0]<59)ds_dat_time_set16[0]++;else ds_dat_time_set16[0]=0;}break;
			; SOURCE LINE # 79
?C0061:
	MOV  	R0,#LOW (ds_dat_time_set16)
	MOVX 	A,@R0
	CLR  	C
	SUBB 	A,#03BH
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0062
?C0174:
	MOVX 	A,@R0
	INC  	A
	MOVX 	@R0,A
	SJMP 	?C0045
?C0062:
	CLR  	A
	MOV  	R0,#LOW (ds_dat_time_set16)
	MOVX 	@R0,A
; 				}
			; SOURCE LINE # 80
?C0045:
; 				 Ds1302_time_Copy(2);
			; SOURCE LINE # 81
	MOV  	R7,#02H
	LCALL	_Ds1302_time_Copy
; 			}
			; SOURCE LINE # 82
?C0040:
; 			if(BurstGodown||(goDown&Refill_sign_3))
			; SOURCE LINE # 83
	MOV  	A,Double_Press_counter+07H
	JB   	ACC.0,?C0065
	MOV  	A,Instruction_code_key+03H
	XRL  	A,#080H
	JNZ  	?C0066
	MOV  	R7,#01H
	SJMP 	?C0067
?C0066:
	MOV  	R7,#00H
?C0067:
	MOV  	C,Refill_sign_3
	CLR  	A
	RLC  	A
	ANL  	A,R7
	JNZ  	$ + 5H
	LJMP 	?C0144
?C0065:
; 			{
			; SOURCE LINE # 84
; 				if(OptionCode[1]<6)Change_sign=1;//确保当Option处在正确的值时触发
			; SOURCE LINE # 85
	LCALL	L?0204
	JNC  	?C0068
	MOV  	R0,#LOW (Change_sign)
	MOV  	A,#01H
	MOVX 	@R0,A
?C0068:
; 				 Ds1302_time_Copy(1);
			; SOURCE LINE # 86
	MOV  	R7,#01H
	LCALL	_Ds1302_time_Copy
; 				switch(OptionCode[1])
			; SOURCE LINE # 87
	MOV  	R0,#LOW (OptionCode+01H)
	MOVX 	A,@R0
	JZ   	?C0079
	DEC  	A
	JZ   	?C0082
	DEC  	A
	JZ   	?C0085
	ADD  	A,#0FEH
	JZ   	?C0073
	DEC  	A
	JZ   	?C0076
	ADD  	A,#02H
	JNZ  	?C0069
; 				{
			; SOURCE LINE # 88
; 					case 3:{if(ds_dat_time_set16[6]>0)ds_dat_time_set16[6]--;else ds_dat_time_set16[6]=99;}break;
			; SOURCE LINE # 89
?C0070:
	MOV  	R0,#LOW (ds_dat_time_set16+06H)
	LCALL	L?0194
	JC   	?C0071
	SJMP 	?C0179
?C0071:
	MOV  	R0,#LOW (ds_dat_time_set16+06H)
	MOV  	A,#063H
	MOVX 	@R0,A
	SJMP 	?C0069
; 					case 4:{if(ds_dat_time_set16[4]>1)ds_dat_time_set16[4]--;else ds_dat_time_set16[4]=12;}break;
			; SOURCE LINE # 90
?C0073:
	MOV  	R0,#LOW (ds_dat_time_set16+04H)
	LCALL	L?0196
	JC   	?C0074
?C0175:
	SJMP 	?C0179
?C0074:
	MOV  	R0,#LOW (ds_dat_time_set16+04H)
	MOV  	A,#0CH
	MOVX 	@R0,A
	SJMP 	?C0069
; 					case 5:{if(ds_dat_time_set16[3]>1)ds_dat_time_set16[3]--;else ds_dat_time_set16[3]=Calculate_Totaldays_Ofmonth(ds_dat_time_set16[6],ds_dat_time_set16[4]);}break;
			; SOURCE LINE # 91
?C0076:
	MOV  	R0,#LOW (ds_dat_time_set16+03H)
	LCALL	L?0196
	JC   	?C0077
?C0176:
	SJMP 	?C0179
?C0077:
	LCALL	L?0203
	MOV  	A,R7
	MOVX 	@R0,A
	SJMP 	?C0069
; 					case 0:{if(ds_dat_time_set16[2]>0)ds_dat_time_set16[2]--;else ds_dat_time_set16[2]=23;}break;
			; SOURCE LINE # 92
?C0079:
	MOV  	R0,#LOW (ds_dat_time_set16+02H)
	LCALL	L?0195
	JC   	?C0080
?C0177:
	SJMP 	?C0179
?C0080:
	MOV  	R0,#LOW (ds_dat_time_set16+02H)
	MOV  	A,#017H
	MOVX 	@R0,A
	SJMP 	?C0069
; 					case 1:{if(ds_dat_time_set16[1]>0)ds_dat_time_set16[1]--;else ds_dat_time_set16[1]=59;}break;
			; SOURCE LINE # 93
?C0082:
	MOV  	R0,#LOW (ds_dat_time_set16+01H)
	LCALL	L?0195
	JC   	?C0083
?C0178:
	SJMP 	?C0179
?C0083:
	MOV  	R0,#LOW (ds_dat_time_set16+01H)
	SJMP 	?C0180
; 					case 2:{if(ds_dat_time_set16[0]>0)ds_dat_time_set16[0]--;else ds_dat_time_set16[0]=59;}break;
			; SOURCE LINE # 94
?C0085:
	MOV  	R0,#LOW (ds_dat_time_set16)
	LCALL	L?0195
	JC   	?C0086
?C0179:
	MOVX 	A,@R0
	DEC  	A
	MOVX 	@R0,A
	SJMP 	?C0069
?C0086:
	MOV  	R0,#LOW (ds_dat_time_set16)
?C0180:
	MOV  	A,#03BH
	MOVX 	@R0,A
; 				}
			; SOURCE LINE # 95
?C0069:
; 				 Ds1302_time_Copy(2);
			; SOURCE LINE # 96
	MOV  	R7,#02H
	LJMP 	_Ds1302_time_Copy
; 			}
			; SOURCE LINE # 97
; 			
; 			break;
			; SOURCE LINE # 99
; 		}	
			; SOURCE LINE # 100
; 		case 100:
			; SOURCE LINE # 101
?C0088:
; 		{
			; SOURCE LINE # 102
; 			if(goIn&Refill_sign_0){Ds1302_Set_time();menuCode=1;}
			; SOURCE LINE # 103
	MOV  	A,Instruction_code_key
	XRL  	A,#080H
	JNZ  	?C0090
	MOV  	R7,#01H
	SJMP 	?C0091
?C0090:
	MOV  	R7,#00H
?C0091:
	MOV  	C,Refill_sign_0
	CLR  	A
	RLC  	A
	ANL  	A,R7
	JZ   	?C0089
	LCALL	Ds1302_Set_time
	MOV  	menuCode,#01H
?C0089:
; 			if(goBack&Refill_sign_1){menuCode=1;}
			; SOURCE LINE # 104
	MOV  	A,Instruction_code_key+01H
	XRL  	A,#080H
	JNZ  	?C0093
	MOV  	R7,#01H
	SJMP 	?C0094
?C0093:
	MOV  	R7,#00H
?C0094:
	MOV  	C,Refill_sign_1
	CLR  	A
	RLC  	A
	ANL  	A,R7
	JNZ  	$ + 5H
	LJMP 	?C0144
	MOV  	menuCode,#01H
; 			break;
			; SOURCE LINE # 105
	RET  	
; 		}
			; SOURCE LINE # 106
; 		case 11:
			; SOURCE LINE # 107
?C0095:
; 		{
			; SOURCE LINE # 108
; 			if(goBack&Refill_sign_1){menuCode=1;OptionCode[2]=10;}
			; SOURCE LINE # 109
	MOV  	A,Instruction_code_key+01H
	XRL  	A,#080H
	JNZ  	?C0097
	MOV  	R7,#01H
	SJMP 	?C0098
?C0097:
	MOV  	R7,#00H
?C0098:
	MOV  	C,Refill_sign_1
	CLR  	A
	RLC  	A
	ANL  	A,R7
	JZ   	?C0096
	MOV  	menuCode,#01H
	MOV  	R0,#LOW (OptionCode+02H)
	MOV  	A,#0AH
	MOVX 	@R0,A
?C0096:
; 			if(goIn&Refill_sign_0){if(OptionCode[2]<OptionCode_Max[2])OptionCode[2]++;else OptionCode[2]=0;}
			; SOURCE LINE # 110
	MOV  	A,Instruction_code_key
	XRL  	A,#080H
	JNZ  	?C0100
	MOV  	R7,#01H
	SJMP 	?C0101
?C0100:
	MOV  	R7,#00H
?C0101:
	MOV  	C,Refill_sign_0
	CLR  	A
	RLC  	A
	ANL  	A,R7
	JZ   	?C0099
	MOV  	R0,#LOW (OptionCode_Max+02H)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (OptionCode+02H)
	MOVX 	A,@R0
	CLR  	C
	SUBB 	A,R7
	JNC  	?C0102
	MOVX 	A,@R0
	INC  	A
	MOVX 	@R0,A
	SJMP 	?C0099
?C0102:
	CLR  	A
	MOV  	R0,#LOW (OptionCode+02H)
	MOVX 	@R0,A
?C0099:
; 			if(BurstGoup||(goUp&Refill_sign_2))
			; SOURCE LINE # 111
	MOV  	A,Double_Press_counter+05H
	JB   	ACC.0,?C0105
	MOV  	A,Instruction_code_key+02H
	XRL  	A,#080H
	JNZ  	?C0106
	MOV  	R7,#01H
	SJMP 	?C0107
?C0106:
	MOV  	R7,#00H
?C0107:
	MOV  	C,Refill_sign_2
	CLR  	A
	RLC  	A
	ANL  	A,R7
	JZ   	?C0104
?C0105:
; 			{
			; SOURCE LINE # 112
; 			switch(OptionCode[2])
			; SOURCE LINE # 113
	MOV  	R0,#LOW (OptionCode+02H)
	MOVX 	A,@R0
	DEC  	A
	JZ   	?C0112
	DEC  	A
	JZ   	?C0115
	DEC  	A
	JZ   	?C0118
	DEC  	A
	JZ   	?C0121
	ADD  	A,#04H
	JNZ  	?C0104
; 				{
			; SOURCE LINE # 114
; 					case 0:if(Sensor_switch[0]<1)Sensor_switch[0]++;else Sensor_switch[0]=0;break;
			; SOURCE LINE # 115
?C0109:
	MOV  	R0,#LOW (Sensor_switch)
	CLR  	C
	LCALL	L?0197
	JNC  	?C0110
	SJMP 	?C0181
?C0110:
	CLR  	A
	MOV  	R0,#LOW (Sensor_switch)
	MOVX 	@R0,A
	SJMP 	?C0104
; 					case 1:if(Sensor_switch[1]<1)Sensor_switch[1]++;else Sensor_switch[1]=0;break;
			; SOURCE LINE # 116
?C0112:
	MOV  	R0,#LOW (Sensor_switch+01H)
	MOVX 	A,@R0
	CLR  	C
	LCALL	L?0198
	JNC  	?C0113
?C0181:
	MOVX 	A,@R0
	INC  	A
	MOVX 	@R0,A
	SJMP 	?C0104
?C0113:
	CLR  	A
	MOV  	R0,#LOW (Sensor_switch+01H)
	MOVX 	@R0,A
	SJMP 	?C0104
; 					case 2:if(rot_taskFrequency[0]<6000)rot_taskFrequency[0]+=100;else rot_taskFrequency[0]=100;break;
			; SOURCE LINE # 117
?C0115:
	MOV  	R0,#LOW (rot_taskFrequency+01H)
	LCALL	L?0199
	JNC  	?C0183
	SJMP 	?C0184
; 					case 3:if(rot_taskFrequency[1]<6000)rot_taskFrequency[1]+=100;else rot_taskFrequency[0]=100;break;
			; SOURCE LINE # 118
?C0118:
	MOV  	R0,#LOW (rot_taskFrequency+03H)
	LCALL	L?0199
	JNC  	?C0119
?C0182:
	SJMP 	?C0184
?C0119:
?C0183:
	MOV  	R0,#LOW (rot_taskFrequency)
	SJMP 	?C0185
; 					case 4:if(Sensor_display_switchingSpeed<6000)Sensor_display_switchingSpeed+=100;else Sensor_display_switchingSpeed=100;break;
			; SOURCE LINE # 119
?C0121:
	CLR  	C
	MOV  	R0,#LOW (Sensor_display_switchingSpeed+01H)
	LCALL	L?0200
	JNC  	?C0122
?C0184:
	INC  	R0
	MOVX 	A,@R0
	ADD  	A,#064H
	MOVX 	@R0,A
	DEC  	R0
	MOVX 	A,@R0
	ADDC 	A,#00H
	MOVX 	@R0,A
	SJMP 	?C0104
?C0122:
	MOV  	R0,#LOW (Sensor_display_switchingSpeed)
?C0185:
	CLR  	A
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,#064H
	MOVX 	@R0,A
; 				}
			; SOURCE LINE # 120
; 			}
			; SOURCE LINE # 121
?C0104:
; 			if(BurstGodown||(goDown&Refill_sign_3))
			; SOURCE LINE # 122
	MOV  	A,Double_Press_counter+07H
	JB   	ACC.0,?C0125
	MOV  	A,Instruction_code_key+03H
	XRL  	A,#080H
	JNZ  	?C0126
	MOV  	R7,#01H
	SJMP 	?C0127
?C0126:
	MOV  	R7,#00H
?C0127:
	MOV  	C,Refill_sign_3
	CLR  	A
	RLC  	A
	ANL  	A,R7
	JZ   	?C0144
?C0125:
; 			switch(OptionCode[2])
			; SOURCE LINE # 123
	MOV  	R0,#LOW (OptionCode+02H)
	MOVX 	A,@R0
	DEC  	A
	JZ   	?C0132
	DEC  	A
	JZ   	?C0135
	DEC  	A
	JZ   	?C0138
	DEC  	A
	JZ   	?C0141
	ADD  	A,#04H
	JNZ  	?C0144
; 				{
			; SOURCE LINE # 124
; 					case 0:if(Sensor_switch[0]>0)Sensor_switch[0]--;else Sensor_switch[0]=1;break;
			; SOURCE LINE # 125
?C0129:
	MOV  	R0,#LOW (Sensor_switch)
	LCALL	L?0195
	JC   	?C0130
	SJMP 	?C0186
?C0130:
	MOV  	R0,#LOW (Sensor_switch)
	SJMP 	?C0187
; 					case 1:if(Sensor_switch[1]>0)Sensor_switch[1]--;else Sensor_switch[1]=1;break;
			; SOURCE LINE # 126
?C0132:
	MOV  	R0,#LOW (Sensor_switch+01H)
	LCALL	L?0195
	JC   	?C0133
?C0186:
	MOVX 	A,@R0
	DEC  	A
	MOVX 	@R0,A
	RET  	
?C0133:
	MOV  	R0,#LOW (Sensor_switch+01H)
?C0187:
	MOV  	A,#01H
	MOVX 	@R0,A
	RET  	
; 					case 2:if(rot_taskFrequency[0]>100)rot_taskFrequency[0]-=100;else rot_taskFrequency[0]=6000;break;
			; SOURCE LINE # 127
?C0135:
	MOV  	R0,#LOW (rot_taskFrequency+01H)
	LCALL	L?0201
	JC   	?C0189
	SJMP 	?C0190
; 					case 3:if(rot_taskFrequency[1]>100)rot_taskFrequency[1]-=100;else rot_taskFrequency[0]=6000;break;
			; SOURCE LINE # 128
?C0138:
	MOV  	R0,#LOW (rot_taskFrequency+03H)
	LCALL	L?0201
	JC   	?C0139
?C0188:
	SJMP 	?C0190
?C0139:
?C0189:
	MOV  	R0,#LOW (rot_taskFrequency)
	SJMP 	?C0191
; 					case 4:if(Sensor_display_switchingSpeed>100)Sensor_display_switchingSpeed-=100;else Sensor_display_switchingSpeed=6000;break;
			; SOURCE LINE # 129
?C0141:
	SETB 	C
	MOV  	R0,#LOW (Sensor_display_switchingSpeed+01H)
	LCALL	L?0202
	JC   	?C0142
?C0190:
	INC  	R0
	MOVX 	A,@R0
	ADD  	A,#09CH
	MOVX 	@R0,A
	DEC  	R0
	MOVX 	A,@R0
	ADDC 	A,#0FFH
	MOVX 	@R0,A
	RET  	
?C0142:
	MOV  	R0,#LOW (Sensor_display_switchingSpeed)
?C0191:
	MOV  	A,#017H
	MOVX 	@R0,A
	INC  	R0
	MOV  	A,#070H
	MOVX 	@R0,A
; 				}
			; SOURCE LINE # 130
; 			break;
			; SOURCE LINE # 131
; 		}
			; SOURCE LINE # 132
; 	}
			; SOURCE LINE # 133
; }
			; SOURCE LINE # 134
?C0144:
	RET  	
L?0203:
	MOV  	R0,#LOW (ds_dat_time_set16+06H)
	MOVX 	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (ds_dat_time_set16+04H)
	MOVX 	A,@R0
	MOV  	R5,A
	LCALL	_Calculate_Totaldays_Ofmonth
	MOV  	R0,#LOW (ds_dat_time_set16+03H)
	RET  	
; END OF control_Section

; void recognition_key()

	RSEG  ?PR?recognition_key?BUTTON
recognition_key:
	USING	0
			; SOURCE LINE # 135
; {
			; SOURCE LINE # 136
; 	uchar i;
; 	
; 	for(i=0;i<4;i++)
			; SOURCE LINE # 139
;---- Variable 'i?140' assigned to Register 'R7' ----
	CLR  	A
	MOV  	R7,A
?C0145:
	MOV  	A,R7
	MOV  	R5,A
	MOV  	R4,#00H
	CLR  	C
	SUBB 	A,#04H
	MOV  	A,#080H
	SUBB 	A,#080H
	JC   	$ + 5H
	LJMP 	?C0146
; 	{
			; SOURCE LINE # 140
; 		Curstatus_key[i]=(KEY0&(i==0)|KEY1&(i==1)|KEY2&(i==2)|KEY3&(i==3));
			; SOURCE LINE # 141
	MOV  	A,R5
	XRL  	A,#01H
	JNZ  	?C0148
	MOV  	R6,#01H
	SJMP 	?C0149
?C0148:
	MOV  	R6,#00H
?C0149:
	MOV  	C,KEY1
	CLR  	A
	RLC  	A
	ANL  	A,R6
	MOV  	R6,A
	MOV  	A,R7
	JNZ  	?C0150
	MOV  	R5,#01H
	SJMP 	?C0151
?C0150:
	MOV  	R5,#00H
?C0151:
	MOV  	C,KEY0
	CLR  	A
	RLC  	A
	ANL  	A,R5
	ORL  	A,R6
	MOV  	R6,A
	MOV  	A,R7
	XRL  	A,#02H
	JNZ  	?C0152
	MOV  	R5,#01H
	SJMP 	?C0153
?C0152:
	MOV  	R5,#00H
?C0153:
	MOV  	C,KEY2
	CLR  	A
	RLC  	A
	ANL  	A,R5
	ORL  	A,R6
	MOV  	R6,A
	MOV  	A,R7
	XRL  	A,#03H
	JNZ  	?C0154
	MOV  	R5,#01H
	SJMP 	?C0155
?C0154:
	MOV  	R5,#00H
?C0155:
	MOV  	C,KEY3
	CLR  	A
	RLC  	A
	ANL  	A,R5
	ORL  	A,R6
	MOV  	R6,A
	MOV  	A,#LOW (Curstatus_key)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	@R0,AR6
; 		if(Prestate_key[i]!=Curstatus_key[i])
			; SOURCE LINE # 142
	LCALL	L?0205
	MOV  	A,@R0
	XRL  	A,R6
	JZ   	?C0156
; 		{
			; SOURCE LINE # 143
; 			if(Curstatus_key[i]==0)//0按下，1抬起
			; SOURCE LINE # 144
	MOV  	A,R6
	JNZ  	?C0157
; 				Instruction_code_key[i]=0x80;
			; SOURCE LINE # 145
	MOV  	A,#LOW (Instruction_code_key)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	@R0,#080H
	SJMP 	?C0158
?C0157:
; 				
; 				
; 			else 
; 				Instruction_code_key[i]=0x81;
			; SOURCE LINE # 149
	MOV  	A,#LOW (Instruction_code_key)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	@R0,#081H
?C0158:
; 				Refill_sign=0xff;
			; SOURCE LINE # 150
	MOV  	Refill_sign,#0FFH
; 				Double_Press_counter[i]=0;
			; SOURCE LINE # 151
; 		}
			; SOURCE LINE # 152
	SJMP 	?C0192
?C0156:
; 		else //状态保持
; 		{
			; SOURCE LINE # 154
; 			if(Curstatus_key[i]==0) 
			; SOURCE LINE # 155
	MOV  	A,#LOW (Curstatus_key)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	A,@R0
	JNZ  	?C0160
; 			{if(Instruction_code_key[i]!=0x82){Instruction_code_key[i]=0x82;Double_Press_counter[i]=0;}
			; SOURCE LINE # 156
	MOV  	A,#LOW (Instruction_code_key)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	A,@R0
	XRL  	A,#082H
	JZ   	?C0161
	MOV  	A,#LOW (Instruction_code_key)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	@R0,#082H
?C0192:
	LCALL	L?0206
	SJMP 	?C0159
?C0161:
; 				else Double_Press_counter[i]++;}
			; SOURCE LINE # 157
	MOV  	A,R7
	ADD  	A,ACC
	ADD  	A,#LOW (Double_Press_counter)
	MOV  	R0,A
	INC  	R0
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JNZ  	?C0159
	INC  	@R0
?C0167:
	SJMP 	?C0159
?C0160:
; 			else 
; 			{if(Instruction_code_key[i]!=0x83){Instruction_code_key[i]=0x83;Double_Idle_counter[i]=0;}
			; SOURCE LINE # 159
	MOV  	A,#LOW (Instruction_code_key)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	A,@R0
	XRL  	A,#083H
	JZ   	?C0164
	MOV  	A,#LOW (Instruction_code_key)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	@R0,#083H
	MOV  	A,R7
	ADD  	A,ACC
	ADD  	A,#LOW (Double_Idle_counter)
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
	SJMP 	?C0165
?C0164:
; 				else Double_Idle_counter[i]++;
			; SOURCE LINE # 160
	MOV  	A,R7
	ADD  	A,ACC
	ADD  	A,#LOW (Double_Idle_counter)
	MOV  	R0,A
	INC  	R0
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JNZ  	?C0168
	INC  	@R0
?C0168:
?C0165:
; 			Double_Press_counter[i]=0;
			; SOURCE LINE # 161
	LCALL	L?0206
; 			Refill_sign=0xff;
			; SOURCE LINE # 162
	MOV  	Refill_sign,#0FFH
; 			}
			; SOURCE LINE # 163
; 		}
			; SOURCE LINE # 164
?C0159:
; 		Prestate_key[i]=Curstatus_key[i];
			; SOURCE LINE # 165
	LCALL	L?0205
	MOV  	@R0,AR6
; 	}
			; SOURCE LINE # 166
	INC  	R7
	LJMP 	?C0145
?C0146:
; 	control_Section();
			; SOURCE LINE # 167
	LJMP 	control_Section
; END OF recognition_key

	END
